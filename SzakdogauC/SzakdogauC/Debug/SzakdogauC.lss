
SzakdogauC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fa  00800100  00002022  000020b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002022  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008002fa  008002fa  000022b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a0  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e56  00000000  00000000  00005874  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ba7  00000000  00000000  000066ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00008274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075b  00000000  00000000  000087c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5f  00000000  00000000  00008f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_15>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_30>
      7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      8c:	7d 04       	cpc	r7, r13
      8e:	86 04       	cpc	r8, r6
      90:	8f 04       	cpc	r8, r15
      92:	98 04       	cpc	r9, r8
      94:	a1 04       	cpc	r10, r1
      96:	aa 04       	cpc	r10, r10
      98:	b3 04       	cpc	r11, r3
      9a:	bc 04       	cpc	r11, r12
      9c:	c5 04       	cpc	r12, r5
      9e:	ce 04       	cpc	r12, r14
      a0:	d7 04       	cpc	r13, r7
      a2:	e0 04       	cpc	r14, r0

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	12 e0       	ldi	r17, 0x02	; 2
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e2       	ldi	r30, 0x22	; 34
      b8:	f0 e2       	ldi	r31, 0x20	; 32
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 3f       	cpi	r26, 0xFA	; 250
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	aa ef       	ldi	r26, 0xFA	; 250
      ca:	b2 e0       	ldi	r27, 0x02	; 2
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a5 35       	cpi	r26, 0x55	; 85
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <main>
      da:	0c 94 0f 10 	jmp	0x201e	; 0x201e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <billmatrix>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "billmatrix.h"

unsigned char billmatrix(unsigned char row)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	2c 97       	sbiw	r28, 0x0c	; 12
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
	const unsigned char billtomb[12]={69, 14, 13, 11, 22, 21, 19, 38, 37, 35, 70, 67};
      f6:	9c e0       	ldi	r25, 0x0C	; 12
      f8:	e0 e0       	ldi	r30, 0x00	; 0
      fa:	f1 e0       	ldi	r31, 0x01	; 1
      fc:	de 01       	movw	r26, r28
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	01 90       	ld	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	9a 95       	dec	r25
     106:	e1 f7       	brne	.-8      	; 0x100 <billmatrix+0x1e>
	unsigned char billgomb, bill, num;
	switch(row)
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	59 f0       	breq	.+22     	; 0x122 <billmatrix+0x40>
     10c:	28 f0       	brcs	.+10     	; 0x118 <billmatrix+0x36>
     10e:	82 30       	cpi	r24, 0x02	; 2
     110:	69 f0       	breq	.+26     	; 0x12c <billmatrix+0x4a>
     112:	83 30       	cpi	r24, 0x03	; 3
     114:	81 f0       	breq	.+32     	; 0x136 <billmatrix+0x54>
     116:	13 c0       	rjmp	.+38     	; 0x13e <billmatrix+0x5c>
	{
		case 0: PORTC=(PORTC&0x80)+0x08; break;
     118:	85 b3       	in	r24, 0x15	; 21
     11a:	80 78       	andi	r24, 0x80	; 128
     11c:	88 5f       	subi	r24, 0xF8	; 248
     11e:	85 bb       	out	0x15, r24	; 21
     120:	0e c0       	rjmp	.+28     	; 0x13e <billmatrix+0x5c>
		case 1: PORTC=(PORTC&0x80)+0x10; break;
     122:	85 b3       	in	r24, 0x15	; 21
     124:	80 78       	andi	r24, 0x80	; 128
     126:	80 5f       	subi	r24, 0xF0	; 240
     128:	85 bb       	out	0x15, r24	; 21
     12a:	09 c0       	rjmp	.+18     	; 0x13e <billmatrix+0x5c>
		case 2: PORTC=(PORTC&0x80)+0x20; break;
     12c:	85 b3       	in	r24, 0x15	; 21
     12e:	80 78       	andi	r24, 0x80	; 128
     130:	80 5e       	subi	r24, 0xE0	; 224
     132:	85 bb       	out	0x15, r24	; 21
     134:	04 c0       	rjmp	.+8      	; 0x13e <billmatrix+0x5c>
		case 3: PORTC=(PORTC&0x80)+0x40; break;
     136:	85 b3       	in	r24, 0x15	; 21
     138:	80 78       	andi	r24, 0x80	; 128
     13a:	80 5c       	subi	r24, 0xC0	; 192
     13c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13e:	85 e3       	ldi	r24, 0x35	; 53
     140:	8a 95       	dec	r24
     142:	f1 f7       	brne	.-4      	; 0x140 <billmatrix+0x5e>
     144:	00 00       	nop
	}
	
	_delay_us(20);
	bill=PINC&0x7F;
     146:	23 b3       	in	r18, 0x13	; 19
     148:	2f 77       	andi	r18, 0x7F	; 127
	for (num=0; num<12; num++)
	{
		if (bill==billtomb[num])
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	28 17       	cp	r18, r24
     14e:	51 f0       	breq	.+20     	; 0x164 <billmatrix+0x82>
     150:	fe 01       	movw	r30, r28
     152:	32 96       	adiw	r30, 0x02	; 2
		case 3: PORTC=(PORTC&0x80)+0x40; break;
	}
	
	_delay_us(20);
	bill=PINC&0x7F;
	for (num=0; num<12; num++)
     154:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (bill==billtomb[num])
     156:	91 91       	ld	r25, Z+
     158:	29 17       	cp	r18, r25
     15a:	29 f0       	breq	.+10     	; 0x166 <billmatrix+0x84>
		case 3: PORTC=(PORTC&0x80)+0x40; break;
	}
	
	_delay_us(20);
	bill=PINC&0x7F;
	for (num=0; num<12; num++)
     15c:	8f 5f       	subi	r24, 0xFF	; 255
     15e:	8c 30       	cpi	r24, 0x0C	; 12
     160:	d1 f7       	brne	.-12     	; 0x156 <billmatrix+0x74>
     162:	01 c0       	rjmp	.+2      	; 0x166 <billmatrix+0x84>
     164:	80 e0       	ldi	r24, 0x00	; 0
			billgomb=num;
			return billgomb;
		}
	}
	return 12;
     166:	2c 96       	adiw	r28, 0x0c	; 12
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	cd bf       	out	0x3d, r28	; 61
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <LCD_busy>:
}

void LCD_busy(void)
{													//BF olvasása
	uint8_t busy;
	DDRE&=~(1<<PE7);  //DDRE 7. bitjébe 0-át rak? bemenet    ott olvassuk majd a BF-et (D7-PE7)
     178:	17 98       	cbi	0x02, 7	; 2
	PORTF&=~(1<<LCD_RS);  //Státusz infó   PORTF 1. bitje 0
     17a:	e2 e6       	ldi	r30, 0x62	; 98
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	8d 7f       	andi	r24, 0xFD	; 253
     182:	80 83       	st	Z, r24
	PORTF|=(1<<LCD_RW);  //olvasás    PORTF 2. bitje 1
     184:	80 81       	ld	r24, Z
     186:	84 60       	ori	r24, 0x04	; 4
     188:	80 83       	st	Z, r24

	do
	{
		busy=0;
		PORTF|=(1<<LCD_EN);  //EN<-1 PORTF 3. bitje 1
     18a:	80 81       	ld	r24, Z
     18c:	88 60       	ori	r24, 0x08	; 8
     18e:	80 83       	st	Z, r24
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	8a 95       	dec	r24
     194:	f1 f7       	brne	.-4      	; 0x192 <LCD_busy+0x1a>
     196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_busy+0x20>
		_delay_us(1);  //felfutó
		busy=(PINE&(1<<PE7));  //átadjuk a BF értékét  PINE 0x80-ba
     198:	91 b1       	in	r25, 0x01	; 1
		PORTF&=~(1<<LCD_EN);  //EN<-0 PORTF 3. bit 0,1,0
     19a:	80 81       	ld	r24, Z
     19c:	87 7f       	andi	r24, 0xF7	; 247
     19e:	80 83       	st	Z, r24
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_busy+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_busy+0x30>
		_delay_us(1);
		PORTF|=(1<<LCD_EN);  //EN<-1
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	8a 95       	dec	r24
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_busy+0x38>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_busy+0x3e>
		_delay_us(1);
		PORTF&=~(1<<LCD_EN);  //EN<-0
     1b6:	80 81       	ld	r24, Z
     1b8:	87 7f       	andi	r24, 0xF7	; 247
     1ba:	80 83       	st	Z, r24
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	8a 95       	dec	r24
     1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_busy+0x46>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_busy+0x4c>
		_delay_us(1);
	}
	while(busy);  //ha busy 0 akk kilép
     1c4:	99 23       	and	r25, r25
     1c6:	0c f3       	brlt	.-62     	; 0x18a <LCD_busy+0x12>
	
	PORTF&=~(1<<LCD_RW);  //R/W<-0 write
     1c8:	e2 e6       	ldi	r30, 0x62	; 98
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	8b 7f       	andi	r24, 0xFB	; 251
     1d0:	80 83       	st	Z, r24
	DDRE|=(1<<PE7);  //PE7<-1
     1d2:	17 9a       	sbi	0x02, 7	; 2
     1d4:	08 95       	ret

000001d6 <LCD_cmd>:
}

void LCD_cmd(uint8_t parancs)
{
     1d6:	cf 93       	push	r28
     1d8:	c8 2f       	mov	r28, r24
	LCD_busy();  //Megvárjuk még felszabadul
     1da:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_busy>
	PORTF&=~(1<<LCD_RS);  //Parancs  PORTF 1,2,3 bitje 0-ba
     1de:	e2 e6       	ldi	r30, 0x62	; 98
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8d 7f       	andi	r24, 0xFD	; 253
     1e6:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_RW);  //Küldés
     1e8:	80 81       	ld	r24, Z
     1ea:	8b 7f       	andi	r24, 0xFB	; 251
     1ec:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_EN);  //EN<-0
     1ee:	80 81       	ld	r24, Z
     1f0:	87 7f       	andi	r24, 0xF7	; 247
     1f2:	80 83       	st	Z, r24
	PORTE&=~(0xF0);  //PORTE felsõ 4 bitje 0-ba
     1f4:	83 b1       	in	r24, 0x03	; 3
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	83 b9       	out	0x03, r24	; 3
	PORTE|=(parancs&0xF0);  //felsõ 4 bit küldése  PORTE  cmd felsõ 4 bitjének a kirakása a felsõ 4 bitre
     1fa:	83 b1       	in	r24, 0x03	; 3
     1fc:	9c 2f       	mov	r25, r28
     1fe:	90 7f       	andi	r25, 0xF0	; 240
     200:	89 2b       	or	r24, r25
     202:	83 b9       	out	0x03, r24	; 3
	ENABLE
     204:	80 81       	ld	r24, Z
     206:	88 60       	ori	r24, 0x08	; 8
     208:	80 83       	st	Z, r24
     20a:	35 e0       	ldi	r19, 0x05	; 5
     20c:	3a 95       	dec	r19
     20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_cmd+0x36>
     210:	00 00       	nop
     212:	80 81       	ld	r24, Z
     214:	87 7f       	andi	r24, 0xF7	; 247
     216:	80 83       	st	Z, r24
     218:	85 e0       	ldi	r24, 0x05	; 5
     21a:	8a 95       	dec	r24
     21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_cmd+0x44>
     21e:	00 00       	nop
	PORTE&=~(0xF0);  // PORTE 0-zás
     220:	83 b1       	in	r24, 0x03	; 3
     222:	8f 70       	andi	r24, 0x0F	; 15
     224:	83 b9       	out	0x03, r24	; 3
	PORTE|=((parancs<<4)&0xF0);  //alsó 4 bit küldése cmd alsó kiküldés
     226:	23 b1       	in	r18, 0x03	; 3
     228:	30 e1       	ldi	r19, 0x10	; 16
     22a:	c3 9f       	mul	r28, r19
     22c:	c0 01       	movw	r24, r0
     22e:	11 24       	eor	r1, r1
     230:	82 2b       	or	r24, r18
     232:	83 b9       	out	0x03, r24	; 3
	ENABLE
     234:	80 81       	ld	r24, Z
     236:	88 60       	ori	r24, 0x08	; 8
     238:	80 83       	st	Z, r24
     23a:	85 e0       	ldi	r24, 0x05	; 5
     23c:	8a 95       	dec	r24
     23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_cmd+0x66>
     240:	00 00       	nop
     242:	80 81       	ld	r24, Z
     244:	87 7f       	andi	r24, 0xF7	; 247
     246:	80 83       	st	Z, r24
     248:	35 e0       	ldi	r19, 0x05	; 5
     24a:	3a 95       	dec	r19
     24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_cmd+0x74>
     24e:	00 00       	nop
}
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <LCD_init>:
#include <inttypes.h>
#include <avr/io.h>
#include "lcd_init.h"

void LCD_init(uint8_t e_bl_cur, uint8_t nodl_cf)
{
     254:	cf 93       	push	r28
     256:	c8 2f       	mov	r28, r24
	DDRE|=0xF0;  //data7...4 out    DDRE utolsó 4 bitjét kimenetre állítja
     258:	82 b1       	in	r24, 0x02	; 2
     25a:	80 6f       	ori	r24, 0xF0	; 240
     25c:	82 b9       	out	0x02, r24	; 2
	DDRF|=(1<<LCD_RS)|(1<<LCD_RW)|(1<<LCD_EN);  //RS, R/W, EN out    DDRF 1,2,3 bitjét kimenetre állítja
     25e:	e1 e6       	ldi	r30, 0x61	; 97
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	8e 60       	ori	r24, 0x0E	; 14
     266:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_RW);  //PORTF 2. bitjét 0-ba rakja   Write data
     268:	e2 e6       	ldi	r30, 0x62	; 98
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8b 7f       	andi	r24, 0xFB	; 251
     270:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_RS);  //PORTF 1. bitjébe 0-át rak
     272:	80 81       	ld	r24, Z
     274:	8d 7f       	andi	r24, 0xFD	; 253
     276:	80 83       	st	Z, r24
	PORTE=0x20;  //0x20 parancs: Function set -Sets interface data length    24.oldal hitachi, alap beállítások
     278:	80 e2       	ldi	r24, 0x20	; 32
     27a:	83 b9       	out	0x03, r24	; 3

	ENABLE  //delay
     27c:	80 81       	ld	r24, Z
     27e:	88 60       	ori	r24, 0x08	; 8
     280:	80 83       	st	Z, r24
     282:	85 e0       	ldi	r24, 0x05	; 5
     284:	8a 95       	dec	r24
     286:	f1 f7       	brne	.-4      	; 0x284 <LCD_init+0x30>
     288:	00 00       	nop
     28a:	80 81       	ld	r24, Z
     28c:	87 7f       	andi	r24, 0xF7	; 247
     28e:	80 83       	st	Z, r24
     290:	85 e0       	ldi	r24, 0x05	; 5
     292:	8a 95       	dec	r24
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_init+0x3e>
     296:	00 00       	nop
	ENABLE  //__| |__  EN bit 0-1 váltakozása talán az elõzõ parancs biztos beállta miatt
     298:	80 81       	ld	r24, Z
     29a:	88 60       	ori	r24, 0x08	; 8
     29c:	80 83       	st	Z, r24
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_init+0x4c>
     2a4:	00 00       	nop
     2a6:	80 81       	ld	r24, Z
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	80 83       	st	Z, r24
     2ac:	85 e0       	ldi	r24, 0x05	; 5
     2ae:	8a 95       	dec	r24
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_init+0x5a>
     2b2:	00 00       	nop
	ENABLE  //4 bites üzemmód, 8x5pixel, 2soros//üzemmód választás//nem tudjuk, hogy bekapcsolás után éppen milyenben van
     2b4:	80 81       	ld	r24, Z
     2b6:	88 60       	ori	r24, 0x08	; 8
     2b8:	80 83       	st	Z, r24
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_init+0x68>
     2c0:	00 00       	nop
     2c2:	80 81       	ld	r24, Z
     2c4:	87 7f       	andi	r24, 0xF7	; 247
     2c6:	80 83       	st	Z, r24
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_init+0x76>
     2ce:	00 00       	nop
		
	switch(nodl_cf)
     2d0:	61 30       	cpi	r22, 0x01	; 1
     2d2:	81 f0       	breq	.+32     	; 0x2f4 <LCD_init+0xa0>
     2d4:	28 f0       	brcs	.+10     	; 0x2e0 <LCD_init+0x8c>
     2d6:	62 30       	cpi	r22, 0x02	; 2
     2d8:	b9 f0       	breq	.+46     	; 0x308 <LCD_init+0xb4>
     2da:	63 30       	cpi	r22, 0x03	; 3
     2dc:	f9 f0       	breq	.+62     	; 0x31c <LCD_init+0xc8>
     2de:	27 c0       	rjmp	.+78     	; 0x32e <LCD_init+0xda>
	{
		case 0: LCD_cmd(0x20);
     2e0:	80 e2       	ldi	r24, 0x20	; 32
     2e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x20);
     2e6:	80 e2       	ldi	r24, 0x20	; 32
     2e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x20); break; // number of display lines: 1 line  character font 5x8
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     2f2:	1d c0       	rjmp	.+58     	; 0x32e <LCD_init+0xda>
		case 1: LCD_cmd(0x24);
     2f4:	84 e2       	ldi	r24, 0x24	; 36
     2f6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x24);
     2fa:	84 e2       	ldi	r24, 0x24	; 36
     2fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x24); break; // number of display lines: 1 line  character font 5x10
     300:	84 e2       	ldi	r24, 0x24	; 36
     302:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     306:	13 c0       	rjmp	.+38     	; 0x32e <LCD_init+0xda>
		case 2:	LCD_cmd(0x28);
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x28);
     30e:	88 e2       	ldi	r24, 0x28	; 40
     310:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x28); break; // number of display lines: 2 line  character font 5x8  ezt használd
     314:	88 e2       	ldi	r24, 0x28	; 40
     316:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     31a:	09 c0       	rjmp	.+18     	; 0x32e <LCD_init+0xda>
		case 3: LCD_cmd(0x2C);
     31c:	8c e2       	ldi	r24, 0x2C	; 44
     31e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x2C);
     322:	8c e2       	ldi	r24, 0x2C	; 44
     324:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
				LCD_cmd(0x2C); break; // number of display lines: 2 line  character font 5x10 ugyan az
     328:	8c e2       	ldi	r24, 0x2C	; 44
     32a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
	}
	
	LCD_cmd(0x02);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
	LCD_cmd(0x01);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
	
	switch(e_bl_cur)
     33a:	c1 30       	cpi	r28, 0x01	; 1
     33c:	51 f0       	breq	.+20     	; 0x352 <LCD_init+0xfe>
     33e:	28 f0       	brcs	.+10     	; 0x34a <LCD_init+0xf6>
     340:	c2 30       	cpi	r28, 0x02	; 2
     342:	59 f0       	breq	.+22     	; 0x35a <LCD_init+0x106>
     344:	c3 30       	cpi	r28, 0x03	; 3
     346:	69 f0       	breq	.+26     	; 0x362 <LCD_init+0x10e>
     348:	0f c0       	rjmp	.+30     	; 0x368 <LCD_init+0x114>
	{
		case 0: LCD_cmd(0x08 | (1<<LCD_E) | (0<<LCD_CUR) | (0<<LCD_BL)); break; //kurzor villog ki, aláhúzás ki, LCD be 0x08
     34a:	8c e0       	ldi	r24, 0x0C	; 12
     34c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     350:	0b c0       	rjmp	.+22     	; 0x368 <LCD_init+0x114>
		case 1: LCD_cmd(0x08 | (1<<LCD_E) | (0<<LCD_CUR) | (1<<LCD_BL)); break; //kurzor villog ki, aláhúzás be, LCD be 0x10
     352:	8e e0       	ldi	r24, 0x0E	; 14
     354:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     358:	07 c0       	rjmp	.+14     	; 0x368 <LCD_init+0x114>
		case 2: LCD_cmd(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (0<<LCD_BL)); break; //kurzor villog be, aláhúzás ki, LCD be 0x12
     35a:	8d e0       	ldi	r24, 0x0D	; 13
     35c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     360:	03 c0       	rjmp	.+6      	; 0x368 <LCD_init+0x114>
		case 3: LCD_cmd(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (1<<LCD_BL)); break; //kurzor villog be, aláhúzás be, LCD be 0x14
     362:	8f e0       	ldi	r24, 0x0F	; 15
     364:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
	}
}
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <LCD_data>:
	PORTE|=((parancs<<4)&0xF0);  //alsó 4 bit küldése cmd alsó kiküldés
	ENABLE
}

void LCD_data(uint8_t data)
{
     36c:	cf 93       	push	r28
     36e:	c8 2f       	mov	r28, r24
	LCD_busy();  //Megvárjuk még felszabadul
     370:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_busy>
	PORTF|=(1<<LCD_RS);  //Adatregiszter
     374:	e2 e6       	ldi	r30, 0x62	; 98
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	82 60       	ori	r24, 0x02	; 2
     37c:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_RW);  //írás
     37e:	80 81       	ld	r24, Z
     380:	8b 7f       	andi	r24, 0xFB	; 251
     382:	80 83       	st	Z, r24
	PORTF&=~(1<<LCD_EN);  //EN<-0
     384:	80 81       	ld	r24, Z
     386:	87 7f       	andi	r24, 0xF7	; 247
     388:	80 83       	st	Z, r24
	PORTE&=~(0xF0);
     38a:	83 b1       	in	r24, 0x03	; 3
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	83 b9       	out	0x03, r24	; 3
	PORTE|=(data&0xF0);  //4 felsõ bit kitétele
     390:	83 b1       	in	r24, 0x03	; 3
     392:	9c 2f       	mov	r25, r28
     394:	90 7f       	andi	r25, 0xF0	; 240
     396:	89 2b       	or	r24, r25
     398:	83 b9       	out	0x03, r24	; 3
	ENABLE
     39a:	80 81       	ld	r24, Z
     39c:	88 60       	ori	r24, 0x08	; 8
     39e:	80 83       	st	Z, r24
     3a0:	35 e0       	ldi	r19, 0x05	; 5
     3a2:	3a 95       	dec	r19
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_data+0x36>
     3a6:	00 00       	nop
     3a8:	80 81       	ld	r24, Z
     3aa:	87 7f       	andi	r24, 0xF7	; 247
     3ac:	80 83       	st	Z, r24
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	8a 95       	dec	r24
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_data+0x44>
     3b4:	00 00       	nop
	PORTE&=~(0xF0);
     3b6:	83 b1       	in	r24, 0x03	; 3
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	83 b9       	out	0x03, r24	; 3
	PORTE|=((data<<4)&0xF0);  //alsó 4 bit kitétele
     3bc:	23 b1       	in	r18, 0x03	; 3
     3be:	30 e1       	ldi	r19, 0x10	; 16
     3c0:	c3 9f       	mul	r28, r19
     3c2:	c0 01       	movw	r24, r0
     3c4:	11 24       	eor	r1, r1
     3c6:	82 2b       	or	r24, r18
     3c8:	83 b9       	out	0x03, r24	; 3
	ENABLE
     3ca:	80 81       	ld	r24, Z
     3cc:	88 60       	ori	r24, 0x08	; 8
     3ce:	80 83       	st	Z, r24
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_data+0x66>
     3d6:	00 00       	nop
     3d8:	80 81       	ld	r24, Z
     3da:	87 7f       	andi	r24, 0xF7	; 247
     3dc:	80 83       	st	Z, r24
     3de:	35 e0       	ldi	r19, 0x05	; 5
     3e0:	3a 95       	dec	r19
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_data+0x74>
     3e4:	00 00       	nop
}
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <LCD_Puts>:

void LCD_Puts(char *adat)
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
	while(*adat)
     3f0:	88 81       	ld	r24, Y
     3f2:	88 23       	and	r24, r24
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_data(*adat);
     3f8:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
	ENABLE
}

void LCD_Puts(char *adat)
{
	while(*adat)
     3fc:	89 91       	ld	r24, Y+
     3fe:	81 11       	cpse	r24, r1
     400:	fb cf       	rjmp	.-10     	; 0x3f8 <LCD_Puts+0xe>
	{
		LCD_data(*adat);
		adat++;
	}
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <LCD_goto>:

void LCD_goto(unsigned char sor, unsigned char hely)
{
	if(sor>=2)
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	10 f0       	brcs	.+4      	; 0x410 <LCD_goto+0x8>
	{
		sor=sor-2;
     40c:	82 50       	subi	r24, 0x02	; 2
		hely=hely+16;
     40e:	60 5f       	subi	r22, 0xF0	; 240
	}
	LCD_cmd((1<<7)|(sor<<6)|hely);
     410:	90 e4       	ldi	r25, 0x40	; 64
     412:	89 9f       	mul	r24, r25
     414:	90 01       	movw	r18, r0
     416:	11 24       	eor	r1, r1
     418:	86 2f       	mov	r24, r22
     41a:	80 68       	ori	r24, 0x80	; 128
     41c:	82 2b       	or	r24, r18
     41e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_cmd>
     422:	08 95       	ret

00000424 <EEPROM_write>:

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
	ujelozmeny[1]=muvelet;
	ujelozmeny[2]=siker;
     424:	e1 99       	sbic	0x1c, 1	; 28
     426:	fe cf       	rjmp	.-4      	; 0x424 <EEPROM_write>
     428:	9f bb       	out	0x1f, r25	; 31
     42a:	8e bb       	out	0x1e, r24	; 30
     42c:	6d bb       	out	0x1d, r22	; 29
     42e:	e2 9a       	sbi	0x1c, 2	; 28
     430:	e1 9a       	sbi	0x1c, 1	; 28
     432:	08 95       	ret

00000434 <EEPROM_read>:
     434:	e1 99       	sbic	0x1c, 1	; 28
     436:	fe cf       	rjmp	.-4      	; 0x434 <EEPROM_read>
     438:	9f bb       	out	0x1f, r25	; 31
     43a:	8e bb       	out	0x1e, r24	; 30
     43c:	e0 9a       	sbi	0x1c, 0	; 28
     43e:	8d b3       	in	r24, 0x1d	; 29
     440:	08 95       	ret

00000442 <adatbazis_init>:
     442:	2f 92       	push	r2
     444:	3f 92       	push	r3
     446:	4f 92       	push	r4
     448:	5f 92       	push	r5
     44a:	6f 92       	push	r6
     44c:	7f 92       	push	r7
     44e:	8f 92       	push	r8
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	05 e1       	ldi	r16, 0x15	; 21
     468:	13 e0       	ldi	r17, 0x03	; 3
     46a:	0f 2e       	mov	r0, r31
     46c:	f4 e6       	ldi	r31, 0x64	; 100
     46e:	2f 2e       	mov	r2, r31
     470:	31 2c       	mov	r3, r1
     472:	f0 2d       	mov	r31, r0
     474:	c0 e0       	ldi	r28, 0x00	; 0
     476:	d0 e0       	ldi	r29, 0x00	; 0
     478:	81 2c       	mov	r8, r1
     47a:	91 2c       	mov	r9, r1
     47c:	54 01       	movw	r10, r8
     47e:	83 94       	inc	r8
     480:	f8 01       	movw	r30, r16
     482:	80 82       	st	Z, r8
     484:	91 82       	std	Z+1, r9	; 0x01
     486:	a2 82       	std	Z+2, r10	; 0x02
     488:	b3 82       	std	Z+3, r11	; 0x03
     48a:	ce 01       	movw	r24, r28
     48c:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     490:	c8 2e       	mov	r12, r24
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     49a:	d1 2c       	mov	r13, r1
     49c:	e1 2c       	mov	r14, r1
     49e:	f1 2c       	mov	r15, r1
     4a0:	fc 2c       	mov	r15, r12
     4a2:	ee 24       	eor	r14, r14
     4a4:	dd 24       	eor	r13, r13
     4a6:	cc 24       	eor	r12, r12
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e0       	ldi	r26, 0x00	; 0
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	dc 01       	movw	r26, r24
     4b0:	99 27       	eor	r25, r25
     4b2:	88 27       	eor	r24, r24
     4b4:	26 01       	movw	r4, r12
     4b6:	37 01       	movw	r6, r14
     4b8:	48 0e       	add	r4, r24
     4ba:	59 1e       	adc	r5, r25
     4bc:	6a 1e       	adc	r6, r26
     4be:	7b 1e       	adc	r7, r27
     4c0:	ce 01       	movw	r24, r28
     4c2:	02 96       	adiw	r24, 0x02	; 2
     4c4:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     4c8:	c8 2e       	mov	r12, r24
     4ca:	d1 2c       	mov	r13, r1
     4cc:	e1 2c       	mov	r14, r1
     4ce:	f1 2c       	mov	r15, r1
     4d0:	fe 2c       	mov	r15, r14
     4d2:	ed 2c       	mov	r14, r13
     4d4:	dc 2c       	mov	r13, r12
     4d6:	cc 24       	eor	r12, r12
     4d8:	c4 0c       	add	r12, r4
     4da:	d5 1c       	adc	r13, r5
     4dc:	e6 1c       	adc	r14, r6
     4de:	f7 1c       	adc	r15, r7
     4e0:	ce 01       	movw	r24, r28
     4e2:	03 96       	adiw	r24, 0x03	; 3
     4e4:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     4e8:	c8 0e       	add	r12, r24
     4ea:	d1 1c       	adc	r13, r1
     4ec:	e1 1c       	adc	r14, r1
     4ee:	f1 1c       	adc	r15, r1
     4f0:	f8 01       	movw	r30, r16
     4f2:	c4 82       	std	Z+4, r12	; 0x04
     4f4:	d5 82       	std	Z+5, r13	; 0x05
     4f6:	e6 82       	std	Z+6, r14	; 0x06
     4f8:	f7 82       	std	Z+7, r15	; 0x07
     4fa:	c1 01       	movw	r24, r2
     4fc:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	f8 01       	movw	r30, r16
     508:	80 87       	std	Z+8, r24	; 0x08
     50a:	91 87       	std	Z+9, r25	; 0x09
     50c:	a2 87       	std	Z+10, r26	; 0x0a
     50e:	b3 87       	std	Z+11, r27	; 0x0b
     510:	c1 01       	movw	r24, r2
     512:	8c 59       	subi	r24, 0x9C	; 156
     514:	9f 4f       	sbci	r25, 0xFF	; 255
     516:	0e 94 1a 02 	call	0x434	; 0x434 <EEPROM_read>
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	f8 01       	movw	r30, r16
     522:	84 87       	std	Z+12, r24	; 0x0c
     524:	95 87       	std	Z+13, r25	; 0x0d
     526:	a6 87       	std	Z+14, r26	; 0x0e
     528:	b7 87       	std	Z+15, r27	; 0x0f
     52a:	ff ef       	ldi	r31, 0xFF	; 255
     52c:	8f 1a       	sub	r8, r31
     52e:	9f 0a       	sbc	r9, r31
     530:	af 0a       	sbc	r10, r31
     532:	bf 0a       	sbc	r11, r31
     534:	00 5f       	subi	r16, 0xF0	; 240
     536:	1f 4f       	sbci	r17, 0xFF	; 255
     538:	24 96       	adiw	r28, 0x04	; 4
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	28 1a       	sub	r2, r24
     53e:	38 0a       	sbc	r3, r24
     540:	c0 31       	cpi	r28, 0x10	; 16
     542:	d1 05       	cpc	r29, r1
     544:	09 f0       	breq	.+2      	; 0x548 <adatbazis_init+0x106>
     546:	9c cf       	rjmp	.-200    	; 0x480 <adatbazis_init+0x3e>
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	7f 90       	pop	r7
     562:	6f 90       	pop	r6
     564:	5f 90       	pop	r5
     566:	4f 90       	pop	r4
     568:	3f 90       	pop	r3
     56a:	2f 90       	pop	r2
     56c:	08 95       	ret

0000056e <init>:
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_init>
     576:	83 e3       	ldi	r24, 0x33	; 51
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <USART_Init>
     57e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <RS_init>
     582:	84 b3       	in	r24, 0x14	; 20
     584:	88 67       	ori	r24, 0x78	; 120
     586:	84 bb       	out	0x14, r24	; 20
     588:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     58c:	81 b3       	in	r24, 0x11	; 17
     58e:	80 6f       	ori	r24, 0xF0	; 240
     590:	81 bb       	out	0x11, r24	; 17
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	8a bb       	out	0x1a, r24	; 26
     596:	8b bb       	out	0x1b, r24	; 27
     598:	12 ba       	out	0x12, r1	; 18
     59a:	83 b7       	in	r24, 0x33	; 51
     59c:	8f 60       	ori	r24, 0x0F	; 15
     59e:	83 bf       	out	0x33, r24	; 51
     5a0:	82 ec       	ldi	r24, 0xC2	; 194
     5a2:	81 bf       	out	0x31, r24	; 49
     5a4:	87 b7       	in	r24, 0x37	; 55
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	87 bf       	out	0x37, r24	; 55
     5aa:	78 94       	sei
     5ac:	08 95       	ret

000005ae <kod_ellenorzes>:
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	90 e1       	ldi	r25, 0x10	; 16
     5b4:	89 9f       	mul	r24, r25
     5b6:	f0 01       	movw	r30, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	eb 5f       	subi	r30, 0xFB	; 251
     5bc:	fc 4f       	sbci	r31, 0xFC	; 252
     5be:	04 81       	ldd	r16, Z+4	; 0x04
     5c0:	15 81       	ldd	r17, Z+5	; 0x05
     5c2:	26 81       	ldd	r18, Z+6	; 0x06
     5c4:	37 81       	ldd	r19, Z+7	; 0x07
     5c6:	04 17       	cp	r16, r20
     5c8:	15 07       	cpc	r17, r21
     5ca:	26 07       	cpc	r18, r22
     5cc:	37 07       	cpc	r19, r23
     5ce:	49 f4       	brne	.+18     	; 0x5e2 <kod_ellenorzes+0x34>
     5d0:	ef e0       	ldi	r30, 0x0F	; 15
     5d2:	f3 e0       	ldi	r31, 0x03	; 3
     5d4:	80 83       	st	Z, r24
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	81 83       	std	Z+1, r24	; 0x01
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	82 83       	std	Z+2, r24	; 0x02
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <kod_ellenorzes+0x42>
     5e2:	ef e0       	ldi	r30, 0x0F	; 15
     5e4:	f3 e0       	ldi	r31, 0x03	; 3
     5e6:	80 83       	st	Z, r24
     5e8:	86 e0       	ldi	r24, 0x06	; 6
     5ea:	81 83       	std	Z+1, r24	; 0x01
     5ec:	12 82       	std	Z+2, r1	; 0x02
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <pergesgatlas>:

void pergesgatlas()
{
	while(1)
	{
		if((billmatrix(0)==12)&&(billmatrix(1)==12)&&(billmatrix(2)==12)&&(billmatrix(3)==12)) return;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     5fc:	8c 30       	cpi	r24, 0x0C	; 12
     5fe:	d9 f7       	brne	.-10     	; 0x5f6 <pergesgatlas>
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     606:	8c 30       	cpi	r24, 0x0C	; 12
     608:	b1 f7       	brne	.-20     	; 0x5f6 <pergesgatlas>
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     610:	8c 30       	cpi	r24, 0x0C	; 12
     612:	89 f7       	brne	.-30     	; 0x5f6 <pergesgatlas>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     61a:	8c 30       	cpi	r24, 0x0C	; 12
     61c:	61 f7       	brne	.-40     	; 0x5f6 <pergesgatlas>
	}
}
     61e:	08 95       	ret

00000620 <szamkeres>:

long int szamkeres(char sor, char hely, char szamjegy, char jelszo)
{
     620:	2f 92       	push	r2
     622:	3f 92       	push	r3
     624:	4f 92       	push	r4
     626:	5f 92       	push	r5
     628:	6f 92       	push	r6
     62a:	7f 92       	push	r7
     62c:	8f 92       	push	r8
     62e:	9f 92       	push	r9
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	29 97       	sbiw	r28, 0x09	; 9
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	f8 2e       	mov	r15, r24
     656:	6b 83       	std	Y+3, r22	; 0x03
     658:	34 2e       	mov	r3, r20
     65a:	2a 83       	std	Y+2, r18	; 0x02
	char szamlalo=0;
	long int szam=0;
	long int tizhatvany=1;
	for (char i=1; i<szamjegy; i++)
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	84 17       	cp	r24, r20
     660:	d0 f4       	brcc	.+52     	; 0x696 <szamkeres+0x76>
     662:	81 2c       	mov	r8, r1
     664:	91 2c       	mov	r9, r1
     666:	54 01       	movw	r10, r8
     668:	83 94       	inc	r8
	{
		tizhatvany*=10;
     66a:	88 0c       	add	r8, r8
     66c:	99 1c       	adc	r9, r9
     66e:	aa 1c       	adc	r10, r10
     670:	bb 1c       	adc	r11, r11
     672:	b5 01       	movw	r22, r10
     674:	a4 01       	movw	r20, r8
     676:	44 0f       	add	r20, r20
     678:	55 1f       	adc	r21, r21
     67a:	66 1f       	adc	r22, r22
     67c:	77 1f       	adc	r23, r23
     67e:	44 0f       	add	r20, r20
     680:	55 1f       	adc	r21, r21
     682:	66 1f       	adc	r22, r22
     684:	77 1f       	adc	r23, r23
     686:	84 0e       	add	r8, r20
     688:	95 1e       	adc	r9, r21
     68a:	a6 1e       	adc	r10, r22
     68c:	b7 1e       	adc	r11, r23
long int szamkeres(char sor, char hely, char szamjegy, char jelszo)
{
	char szamlalo=0;
	long int szam=0;
	long int tizhatvany=1;
	for (char i=1; i<szamjegy; i++)
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	38 12       	cpse	r3, r24
     692:	eb cf       	rjmp	.-42     	; 0x66a <szamkeres+0x4a>
     694:	04 c0       	rjmp	.+8      	; 0x69e <szamkeres+0x7e>

long int szamkeres(char sor, char hely, char szamjegy, char jelszo)
{
	char szamlalo=0;
	long int szam=0;
	long int tizhatvany=1;
     696:	81 2c       	mov	r8, r1
     698:	91 2c       	mov	r9, r1
     69a:	54 01       	movw	r10, r8
     69c:	83 94       	inc	r8
	for (char i=1; i<szamjegy; i++)
	{
		tizhatvany*=10;
	}
	
	for (char i=0; i<szamjegy; i++)
     69e:	33 20       	and	r3, r3
     6a0:	91 f0       	breq	.+36     	; 0x6c6 <szamkeres+0xa6>
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	93 0d       	add	r25, r3
     6a6:	eb 81       	ldd	r30, Y+3	; 0x03
     6a8:	e9 83       	std	Y+1, r30	; 0x01
     6aa:	9c 83       	std	Y+4, r25	; 0x04
	{
		LCD_goto(sor, i+hely); LCD_data(' ');
     6ac:	69 81       	ldd	r22, Y+1	; 0x01
     6ae:	8f 2d       	mov	r24, r15
     6b0:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     6b4:	80 e2       	ldi	r24, 0x20	; 32
     6b6:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
     6ba:	f9 81       	ldd	r31, Y+1	; 0x01
     6bc:	ff 5f       	subi	r31, 0xFF	; 255
     6be:	f9 83       	std	Y+1, r31	; 0x01
	for (char i=1; i<szamjegy; i++)
	{
		tizhatvany*=10;
	}
	
	for (char i=0; i<szamjegy; i++)
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	f8 13       	cpse	r31, r24
     6c4:	f3 cf       	rjmp	.-26     	; 0x6ac <szamkeres+0x8c>
     6c6:	41 2c       	mov	r4, r1
     6c8:	51 2c       	mov	r5, r1
     6ca:	32 01       	movw	r6, r4
     6cc:	21 2c       	mov	r2, r1
     6ce:	eb 80       	ldd	r14, Y+3	; 0x03
     6d0:	e3 0c       	add	r14, r3
     6d2:	cb 80       	ldd	r12, Y+3	; 0x03
     6d4:	ca 94       	dec	r12
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo++;
			}
			if (billmatrix(i)==10)
			{
				szam=0;
     6d6:	8c 82       	std	Y+4, r8	; 0x04
     6d8:	9d 82       	std	Y+5, r9	; 0x05
     6da:	ae 82       	std	Y+6, r10	; 0x06
     6dc:	bf 82       	std	Y+7, r11	; 0x07
				pergesgatlas();
				return szam;
			}
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return -1;}
     6de:	39 82       	std	Y+1, r3	; 0x01
		LCD_goto(sor, i+hely); LCD_data(' ');
	}
	
	while(1)
	{
		for (char i=0; i<4; i++)
     6e0:	18 86       	std	Y+8, r1	; 0x08
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	99 87       	std	Y+9, r25	; 0x09
		{
			if (billmatrix(i)<10)
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     6ec:	8a 30       	cpi	r24, 0x0A	; 10
     6ee:	60 f5       	brcc	.+88     	; 0x748 <szamkeres+0x128>
			{
				szam=(szam%tizhatvany)*10+billmatrix(i);
     6f0:	c3 01       	movw	r24, r6
     6f2:	b2 01       	movw	r22, r4
     6f4:	a5 01       	movw	r20, r10
     6f6:	94 01       	movw	r18, r8
     6f8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	aa 1f       	adc	r26, r26
     706:	bb 1f       	adc	r27, r27
     708:	2c 01       	movw	r4, r24
     70a:	3d 01       	movw	r6, r26
     70c:	44 0c       	add	r4, r4
     70e:	55 1c       	adc	r5, r5
     710:	66 1c       	adc	r6, r6
     712:	77 1c       	adc	r7, r7
     714:	44 0c       	add	r4, r4
     716:	55 1c       	adc	r5, r5
     718:	66 1c       	adc	r6, r6
     71a:	77 1c       	adc	r7, r7
     71c:	48 0e       	add	r4, r24
     71e:	59 1e       	adc	r5, r25
     720:	6a 1e       	adc	r6, r26
     722:	7b 1e       	adc	r7, r27
     724:	89 85       	ldd	r24, Y+9	; 0x09
     726:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     72a:	48 0e       	add	r4, r24
     72c:	51 1c       	adc	r5, r1
     72e:	61 1c       	adc	r6, r1
     730:	71 1c       	adc	r7, r1
				pergesgatlas();
     732:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <pergesgatlas>
				LCD_goto(3, 0); LCD_Puts("                ");
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     73e:	8c e0       	ldi	r24, 0x0C	; 12
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
				szamlalo++;
     746:	23 94       	inc	r2
			}
			if (billmatrix(i)==10)
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     74e:	8a 30       	cpi	r24, 0x0A	; 10
     750:	e9 f4       	brne	.+58     	; 0x78c <szamkeres+0x16c>
			{
				szam=0;
				pergesgatlas();
     752:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <pergesgatlas>
				LCD_goto(3, 0); LCD_Puts("                ");
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     75e:	8c e0       	ldi	r24, 0x0C	; 12
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
				szamlalo=0;
				for (char i=0; i<szamjegy; i++)
     766:	e9 81       	ldd	r30, Y+1	; 0x01
     768:	ee 23       	and	r30, r30
     76a:	09 f4       	brne	.+2      	; 0x76e <szamkeres+0x14e>
     76c:	68 c0       	rjmp	.+208    	; 0x83e <szamkeres+0x21e>
     76e:	fb 81       	ldd	r31, Y+3	; 0x03
     770:	f8 87       	std	Y+8, r31	; 0x08
				{
					LCD_goto(sor, i+hely); LCD_data(' ');
     772:	68 85       	ldd	r22, Y+8	; 0x08
     774:	8f 2d       	mov	r24, r15
     776:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
     780:	98 85       	ldd	r25, Y+8	; 0x08
     782:	9f 5f       	subi	r25, 0xFF	; 255
     784:	98 87       	std	Y+8, r25	; 0x08
			{
				szam=0;
				pergesgatlas();
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo=0;
				for (char i=0; i<szamjegy; i++)
     786:	e9 12       	cpse	r14, r25
     788:	f4 cf       	rjmp	.-24     	; 0x772 <szamkeres+0x152>
     78a:	8a c0       	rjmp	.+276    	; 0x8a0 <szamkeres+0x280>
				{
					LCD_goto(sor, i+hely); LCD_data(' ');
				}
			}
			
			if (jelszo==0)
     78c:	fa 81       	ldd	r31, Y+2	; 0x02
     78e:	ff 23       	and	r31, r31
     790:	39 f0       	breq	.+14     	; 0x7a0 <szamkeres+0x180>
					kiiras_seged/=10;
				}
			}
			else
			{
				for (char i=0; (i<szamlalo)&&(i<szamjegy); i++)
     792:	22 20       	and	r2, r2
     794:	09 f4       	brne	.+2      	; 0x798 <szamkeres+0x178>
     796:	59 c0       	rjmp	.+178    	; 0x84a <szamkeres+0x22a>
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	81 11       	cpse	r24, r1
     79c:	3c c0       	rjmp	.+120    	; 0x816 <szamkeres+0x1f6>
     79e:	55 c0       	rjmp	.+170    	; 0x84a <szamkeres+0x22a>
			}
			
			if (jelszo==0)
			{
				long int kiiras_seged=tizhatvany;
				for (char i=0; i<szamjegy; i++)
     7a0:	99 81       	ldd	r25, Y+1	; 0x01
     7a2:	91 11       	cpse	r25, r1
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <szamkeres+0x192>
     7a6:	51 c0       	rjmp	.+162    	; 0x84a <szamkeres+0x22a>
			if (billmatrix(i)==10)
			{
				szam=0;
				pergesgatlas();
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo=0;
     7a8:	21 2c       	mov	r2, r1
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo++;
			}
			if (billmatrix(i)==10)
			{
				szam=0;
     7aa:	41 2c       	mov	r4, r1
     7ac:	51 2c       	mov	r5, r1
     7ae:	61 2c       	mov	r6, r1
     7b0:	71 2c       	mov	r7, r1
     7b2:	eb 81       	ldd	r30, Y+3	; 0x03
     7b4:	3c 80       	ldd	r3, Y+4	; 0x04
     7b6:	dd 80       	ldd	r13, Y+5	; 0x05
     7b8:	0e 81       	ldd	r16, Y+6	; 0x06
     7ba:	1f 81       	ldd	r17, Y+7	; 0x07
     7bc:	e8 87       	std	Y+8, r30	; 0x08
			if (jelszo==0)
			{
				long int kiiras_seged=tizhatvany;
				for (char i=0; i<szamjegy; i++)
				{
					LCD_goto(sor, i+hely); LCD_data((szam/kiiras_seged)%10+48);
     7be:	68 85       	ldd	r22, Y+8	; 0x08
     7c0:	8f 2d       	mov	r24, r15
     7c2:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     7c6:	c3 01       	movw	r24, r6
     7c8:	b2 01       	movw	r22, r4
     7ca:	23 2d       	mov	r18, r3
     7cc:	3d 2d       	mov	r19, r13
     7ce:	40 2f       	mov	r20, r16
     7d0:	51 2f       	mov	r21, r17
     7d2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     7d6:	ca 01       	movw	r24, r20
     7d8:	b9 01       	movw	r22, r18
     7da:	2a e0       	ldi	r18, 0x0A	; 10
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     7e6:	80 e3       	ldi	r24, 0x30	; 48
     7e8:	86 0f       	add	r24, r22
     7ea:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
					kiiras_seged/=10;
     7ee:	63 2d       	mov	r22, r3
     7f0:	7d 2d       	mov	r23, r13
     7f2:	80 2f       	mov	r24, r16
     7f4:	91 2f       	mov	r25, r17
     7f6:	2a e0       	ldi	r18, 0x0A	; 10
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divmodsi4>
     802:	32 2e       	mov	r3, r18
     804:	d3 2e       	mov	r13, r19
     806:	04 2f       	mov	r16, r20
     808:	15 2f       	mov	r17, r21
     80a:	88 85       	ldd	r24, Y+8	; 0x08
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	88 87       	std	Y+8, r24	; 0x08
			}
			
			if (jelszo==0)
			{
				long int kiiras_seged=tizhatvany;
				for (char i=0; i<szamjegy; i++)
     810:	8e 11       	cpse	r24, r14
     812:	d5 cf       	rjmp	.-86     	; 0x7be <szamkeres+0x19e>
     814:	1a c0       	rjmp	.+52     	; 0x84a <szamkeres+0x22a>
     816:	e9 81       	ldd	r30, Y+1	; 0x01
     818:	ec 0d       	add	r30, r12
     81a:	1e 2d       	mov	r17, r14
     81c:	12 19       	sub	r17, r2
     81e:	e8 87       	std	Y+8, r30	; 0x08
			}
			else
			{
				for (char i=0; (i<szamlalo)&&(i<szamjegy); i++)
				{
					LCD_goto(sor, hely+szamjegy-i-1); LCD_data('*');
     820:	68 85       	ldd	r22, Y+8	; 0x08
     822:	8f 2d       	mov	r24, r15
     824:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     828:	8a e2       	ldi	r24, 0x2A	; 42
     82a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
					kiiras_seged/=10;
				}
			}
			else
			{
				for (char i=0; (i<szamlalo)&&(i<szamjegy); i++)
     82e:	88 85       	ldd	r24, Y+8	; 0x08
     830:	18 17       	cp	r17, r24
     832:	59 f0       	breq	.+22     	; 0x84a <szamkeres+0x22a>
     834:	81 50       	subi	r24, 0x01	; 1
     836:	88 87       	std	Y+8, r24	; 0x08
     838:	c8 12       	cpse	r12, r24
     83a:	f2 cf       	rjmp	.-28     	; 0x820 <szamkeres+0x200>
     83c:	06 c0       	rjmp	.+12     	; 0x84a <szamkeres+0x22a>
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo++;
			}
			if (billmatrix(i)==10)
			{
				szam=0;
     83e:	41 2c       	mov	r4, r1
     840:	51 2c       	mov	r5, r1
     842:	61 2c       	mov	r6, r1
     844:	71 2c       	mov	r7, r1
				pergesgatlas();
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo=0;
     846:	21 2c       	mov	r2, r1
     848:	00 c0       	rjmp	.+0      	; 0x84a <szamkeres+0x22a>
				{
					LCD_goto(sor, hely+szamjegy-i-1); LCD_data('*');
				}
			}
			
			if (billmatrix(i)==11)
     84a:	89 85       	ldd	r24, Y+9	; 0x09
     84c:	0e 94 71 00 	call	0xe2	; 0xe2 <billmatrix>
     850:	8b 30       	cpi	r24, 0x0B	; 11
     852:	39 f4       	brne	.+14     	; 0x862 <szamkeres+0x242>
			{
				pergesgatlas();
     854:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <pergesgatlas>
				return szam;
     858:	64 2d       	mov	r22, r4
     85a:	75 2d       	mov	r23, r5
     85c:	86 2d       	mov	r24, r6
     85e:	97 2d       	mov	r25, r7
     860:	29 c0       	rjmp	.+82     	; 0x8b4 <szamkeres+0x294>
		LCD_goto(sor, i+hely); LCD_data(' ');
	}
	
	while(1)
	{
		for (char i=0; i<4; i++)
     862:	f9 85       	ldd	r31, Y+9	; 0x09
     864:	ff 5f       	subi	r31, 0xFF	; 255
     866:	f9 87       	std	Y+9, r31	; 0x09
     868:	f4 30       	cpi	r31, 0x04	; 4
     86a:	09 f0       	breq	.+2      	; 0x86e <szamkeres+0x24e>
     86c:	3c cf       	rjmp	.-392    	; 0x6e6 <szamkeres+0xc6>
				pergesgatlas();
				return szam;
			}
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return -1;}
     86e:	e3 e6       	ldi	r30, 0x63	; 99
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	61 f4       	brne	.+24     	; 0x890 <szamkeres+0x270>
     878:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
     87c:	81 11       	cpse	r24, r1
     87e:	08 c0       	rjmp	.+16     	; 0x890 <szamkeres+0x270>
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	7f ef       	ldi	r23, 0xFF	; 255
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <szamkeres+0x294>
		if (PING==0) gomb_seged=0;
     890:	e3 e6       	ldi	r30, 0x63	; 99
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	81 11       	cpse	r24, r1
     898:	23 cf       	rjmp	.-442    	; 0x6e0 <szamkeres+0xc0>
     89a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
     89e:	20 cf       	rjmp	.-448    	; 0x6e0 <szamkeres+0xc0>
				{
					LCD_goto(sor, i+hely); LCD_data(' ');
				}
			}
			
			if (jelszo==0)
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	ff 23       	and	r31, r31
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <szamkeres+0x288>
     8a6:	80 cf       	rjmp	.-256    	; 0x7a8 <szamkeres+0x188>
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo++;
			}
			if (billmatrix(i)==10)
			{
				szam=0;
     8a8:	41 2c       	mov	r4, r1
     8aa:	51 2c       	mov	r5, r1
     8ac:	61 2c       	mov	r6, r1
     8ae:	71 2c       	mov	r7, r1
				pergesgatlas();
				LCD_goto(3, 0); LCD_Puts("                ");
				szamlalo=0;
     8b0:	21 2c       	mov	r2, r1
     8b2:	cb cf       	rjmp	.-106    	; 0x84a <szamkeres+0x22a>
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return -1;}
		if (PING==0) gomb_seged=0;
	}
}
     8b4:	29 96       	adiw	r28, 0x09	; 9
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	4f 90       	pop	r4
     8e0:	3f 90       	pop	r3
     8e2:	2f 90       	pop	r2
     8e4:	08 95       	ret

000008e6 <uzenet>:

void uzenet(char sorszam)
{
	switch(sorszam)
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	8c 30       	cpi	r24, 0x0C	; 12
     8ea:	91 05       	cpc	r25, r1
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <uzenet+0xa>
     8ee:	80 c0       	rjmp	.+256    	; 0x9f0 <uzenet+0x10a>
     8f0:	fc 01       	movw	r30, r24
     8f2:	ea 5b       	subi	r30, 0xBA	; 186
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__tablejump2__>
	{
		case 0: LCD_goto(3, 0); LCD_Puts("Hibas szam!     "); break;
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     902:	8d e1       	ldi	r24, 0x1D	; 29
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     90a:	08 95       	ret
		case 1: LCD_goto(3, 0); LCD_Puts("Kod elfogadva!  "); break;
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     914:	8e e2       	ldi	r24, 0x2E	; 46
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     91c:	08 95       	ret
		case 2: LCD_goto(3, 0); LCD_Puts("Zarolt szekreny!"); break;
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     926:	8f e3       	ldi	r24, 0x3F	; 63
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     92e:	08 95       	ret
		case 3: LCD_goto(3, 0); LCD_Puts("Az admin zarolt!"); break;
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     938:	80 e5       	ldi	r24, 0x50	; 80
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     940:	08 95       	ret
		case 4: LCD_goto(3, 0); LCD_Puts("Hibas kod!      "); break;
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     94a:	81 e6       	ldi	r24, 0x61	; 97
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     952:	08 95       	ret
		case 5: LCD_goto(3, 0); LCD_Puts("Szekreny nyitva!"); break;
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     95c:	82 e7       	ldi	r24, 0x72	; 114
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     964:	08 95       	ret
		case 6: LCD_goto(3, 0); LCD_Puts("Szekreny zarva! "); break;
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     96e:	83 e8       	ldi	r24, 0x83	; 131
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     976:	08 95       	ret
		case 7: LCD_goto(3, 0); LCD_Puts("Kod modositva!  "); break;
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     980:	84 e9       	ldi	r24, 0x94	; 148
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     988:	08 95       	ret
		case 8: LCD_goto(3, 0); LCD_Puts("Sikeres zarolas!"); break;
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     992:	85 ea       	ldi	r24, 0xA5	; 165
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     99a:	08 95       	ret
		case 9: LCD_goto(3, 0); LCD_Puts("Zarolas torolve!"); break;
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     9a4:	86 eb       	ldi	r24, 0xB6	; 182
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     9ac:	08 95       	ret
		case 10: LCD_goto(3, 0); LCD_Puts("Felszabaditva!  "); break;
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     9b6:	87 ec       	ldi	r24, 0xC7	; 199
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     9be:	08 95       	ret
		case 11: LCD_goto(0, 0); LCD_Puts("                ");
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     9c8:	8c e0       	ldi	r24, 0x0C	; 12
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
				 LCD_goto(1, 0); LCD_Puts("                ");
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
				 LCD_goto(2, 0); LCD_Puts("                "); break;
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
     9e8:	8c e0       	ldi	r24, 0x0C	; 12
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
     9f0:	08 95       	ret

000009f2 <eeprom_iras>:
	}
}

void eeprom_iras(long int adat, char sor, char szekrenyszam)
{
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	6b 01       	movw	r12, r22
     a00:	7c 01       	movw	r14, r24
	switch(sor)
     a02:	42 30       	cpi	r20, 0x02	; 2
     a04:	69 f1       	breq	.+90     	; 0xa60 <eeprom_iras+0x6e>
     a06:	43 30       	cpi	r20, 0x03	; 3
     a08:	99 f1       	breq	.+102    	; 0xa70 <eeprom_iras+0x7e>
     a0a:	41 30       	cpi	r20, 0x01	; 1
     a0c:	c1 f5       	brne	.+112    	; 0xa7e <eeprom_iras+0x8c>
	{
		case 1: EEPROM_write((szekrenyszam-1)*4, (char)(adat>>24));
     a0e:	c2 2f       	mov	r28, r18
     a10:	d0 e0       	ldi	r29, 0x00	; 0
     a12:	21 97       	sbiw	r28, 0x01	; 1
     a14:	cc 0f       	add	r28, r28
     a16:	dd 1f       	adc	r29, r29
     a18:	cc 0f       	add	r28, r28
     a1a:	dd 1f       	adc	r29, r29
     a1c:	6f 2d       	mov	r22, r15
     a1e:	99 27       	eor	r25, r25
     a20:	67 fd       	sbrc	r22, 7
     a22:	90 95       	com	r25
     a24:	79 2f       	mov	r23, r25
     a26:	89 2f       	mov	r24, r25
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
				EEPROM_write((szekrenyszam-1)*4+1, (char)(adat>>16));
     a2e:	b7 01       	movw	r22, r14
     a30:	99 27       	eor	r25, r25
     a32:	77 fd       	sbrc	r23, 7
     a34:	90 95       	com	r25
     a36:	89 2f       	mov	r24, r25
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
				EEPROM_write((szekrenyszam-1)*4+2, (char)(adat>>8));
     a40:	99 27       	eor	r25, r25
     a42:	f7 fc       	sbrc	r15, 7
     a44:	9a 95       	dec	r25
     a46:	8f 2d       	mov	r24, r15
     a48:	7e 2d       	mov	r23, r14
     a4a:	6d 2d       	mov	r22, r13
     a4c:	ce 01       	movw	r24, r28
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
				EEPROM_write((szekrenyszam-1)*4+3, (char)adat); break;
     a54:	6c 2d       	mov	r22, r12
     a56:	ce 01       	movw	r24, r28
     a58:	03 96       	adiw	r24, 0x03	; 3
     a5a:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <eeprom_iras+0x8c>
		case 2:	EEPROM_write(100+szekrenyszam-1, (char)adat); break;
     a60:	82 2f       	mov	r24, r18
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	6c 2d       	mov	r22, r12
     a66:	8d 59       	subi	r24, 0x9D	; 157
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <eeprom_iras+0x8c>
		case 3:	EEPROM_write(200+szekrenyszam-1, (char)adat); break;
     a70:	82 2f       	mov	r24, r18
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	6c 2d       	mov	r22, r12
     a76:	89 53       	subi	r24, 0x39	; 57
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	0e 94 12 02 	call	0x424	; 0x424 <EEPROM_write>
	}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <__vector_15>:
		menu();	
	}
}

ISR(TIMER0_COMP_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <__vector_15+0x3c>
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	05 e1       	ldi	r16, 0x15	; 21
     ace:	13 e0       	ldi	r17, 0x03	; 3
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fa ef       	ldi	r31, 0xFA	; 250
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f2 e0       	ldi	r31, 0x02	; 2
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	dd 24       	eor	r13, r13
     ade:	d3 94       	inc	r13
	static int szamlalo[5]={0, 0, 0, 0, 0};
		
	for (char i=0; i<4; i++)
	{
		if ((adatbazis[(int)i][3]>=1)&&(adatbazis[(int)i][3]<4)) szamlalo[(int)i]++;
     ae0:	f8 01       	movw	r30, r16
     ae2:	84 85       	ldd	r24, Z+12	; 0x0c
     ae4:	95 85       	ldd	r25, Z+13	; 0x0d
     ae6:	a6 85       	ldd	r26, Z+14	; 0x0e
     ae8:	b7 85       	ldd	r27, Z+15	; 0x0f
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	61 50       	subi	r22, 0x01	; 1
     af0:	71 09       	sbc	r23, r1
     af2:	81 09       	sbc	r24, r1
     af4:	91 09       	sbc	r25, r1
     af6:	63 30       	cpi	r22, 0x03	; 3
     af8:	71 05       	cpc	r23, r1
     afa:	81 05       	cpc	r24, r1
     afc:	91 05       	cpc	r25, r1
     afe:	58 f4       	brcc	.+22     	; 0xb16 <__vector_15+0x8a>
     b00:	f7 01       	movw	r30, r14
     b02:	20 81       	ld	r18, Z
     b04:	31 81       	ldd	r19, Z+1	; 0x01
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	31 83       	std	Z+1, r19	; 0x01
     b0c:	20 83       	st	Z, r18
		else szamlalo[(int)i]=0;	//ha admin felszabadítaná a szekrenyt, megszunik a zarolas
		if (szamlalo[(int)i]==7200)
     b0e:	20 32       	cpi	r18, 0x20	; 32
     b10:	3c 41       	sbci	r19, 0x1C	; 28
     b12:	89 f4       	brne	.+34     	; 0xb36 <__vector_15+0xaa>
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__vector_15+0x92>
	static int szamlalo[5]={0, 0, 0, 0, 0};
		
	for (char i=0; i<4; i++)
	{
		if ((adatbazis[(int)i][3]>=1)&&(adatbazis[(int)i][3]<4)) szamlalo[(int)i]++;
		else szamlalo[(int)i]=0;	//ha admin felszabadítaná a szekrenyt, megszunik a zarolas
     b16:	f7 01       	movw	r30, r14
     b18:	11 82       	std	Z+1, r1	; 0x01
     b1a:	10 82       	st	Z, r1
     b1c:	0c c0       	rjmp	.+24     	; 0xb36 <__vector_15+0xaa>
		if (szamlalo[(int)i]==7200)
		{
			adatbazis[(int)i][3]--;
     b1e:	f8 01       	movw	r30, r16
     b20:	64 87       	std	Z+12, r22	; 0x0c
     b22:	75 87       	std	Z+13, r23	; 0x0d
     b24:	86 87       	std	Z+14, r24	; 0x0e
     b26:	97 87       	std	Z+15, r25	; 0x0f
			eeprom_iras(adatbazis[(int)i][3], 3, i+1);
     b28:	2d 2d       	mov	r18, r13
     b2a:	43 e0       	ldi	r20, 0x03	; 3
     b2c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
			szamlalo[(int)i]=0;
     b30:	f7 01       	movw	r30, r14
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1
     b36:	d3 94       	inc	r13
     b38:	00 5f       	subi	r16, 0xF0	; 240
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	f2 e0       	ldi	r31, 0x02	; 2
     b3e:	ef 0e       	add	r14, r31
     b40:	f1 1c       	adc	r15, r1

ISR(TIMER0_COMP_vect)
{
	static int szamlalo[5]={0, 0, 0, 0, 0};
		
	for (char i=0; i<4; i++)
     b42:	35 e0       	ldi	r19, 0x05	; 5
     b44:	d3 12       	cpse	r13, r19
     b46:	cc cf       	rjmp	.-104    	; 0xae0 <__vector_15+0x54>
			eeprom_iras(adatbazis[(int)i][3], 3, i+1);
			szamlalo[(int)i]=0;
		}
	}
	
	if (admin_zar>=1) szamlalo[4]++;
     b48:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <admin_zar>
     b4c:	88 23       	and	r24, r24
     b4e:	41 f0       	breq	.+16     	; 0xb60 <__vector_15+0xd4>
     b50:	ea ef       	ldi	r30, 0xFA	; 250
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	20 85       	ldd	r18, Z+8	; 0x08
     b56:	31 85       	ldd	r19, Z+9	; 0x09
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	31 87       	std	Z+9, r19	; 0x09
     b5e:	20 87       	std	Z+8, r18	; 0x08
	if (szamlalo[4]==7200)
     b60:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <__data_end+0x8>
     b64:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <__data_end+0x9>
     b68:	20 32       	cpi	r18, 0x20	; 32
     b6a:	3c 41       	sbci	r19, 0x1C	; 28
     b6c:	39 f4       	brne	.+14     	; 0xb7c <__vector_15+0xf0>
	{
		admin_zar--;
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <admin_zar>
		szamlalo[4]=0;
     b74:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <__data_end+0x9>
     b78:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <__data_end+0x8>
	}
	
	char data[2];
	if(((data_fogad[0]==0x55)&&(data_fogad[1]==1)&&(data_fogad[7]==0xAA))||((data_fogad[0]==0x33)&&(data_fogad[1]==1)&&(data_fogad[2]==0xCC))||((data_fogad[0]==0x11)&&(data_fogad[1]==1)&&(data_fogad[7]==0xEE))||((data_fogad[0]==0x22)&&(data_fogad[1]==1)&&(data_fogad[8]==0xDD)))	//keret+cím
     b7c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <data_fogad>
     b80:	85 35       	cpi	r24, 0x55	; 85
     b82:	59 f4       	brne	.+22     	; 0xb9a <__vector_15+0x10e>
     b84:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <data_fogad+0x1>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_15+0x102>
     b8c:	35 c4       	rjmp	.+2154   	; 0x13f8 <__stack+0x2f9>
     b8e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <data_fogad+0x7>
     b92:	8a 3a       	cpi	r24, 0xAA	; 170
     b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_15+0x10c>
     b96:	30 c4       	rjmp	.+2144   	; 0x13f8 <__stack+0x2f9>
     b98:	10 c3       	rjmp	.+1568   	; 0x11ba <__stack+0xbb>
     b9a:	83 33       	cpi	r24, 0x33	; 51
     b9c:	59 f4       	brne	.+22     	; 0xbb4 <__vector_15+0x128>
     b9e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <data_fogad+0x1>
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__vector_15+0x11c>
     ba6:	28 c4       	rjmp	.+2128   	; 0x13f8 <__stack+0x2f9>
     ba8:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <data_fogad+0x2>
     bac:	8c 3c       	cpi	r24, 0xCC	; 204
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_15+0x126>
     bb0:	23 c4       	rjmp	.+2118   	; 0x13f8 <__stack+0x2f9>
     bb2:	1b c0       	rjmp	.+54     	; 0xbea <__vector_15+0x15e>
     bb4:	81 31       	cpi	r24, 0x11	; 17
     bb6:	59 f4       	brne	.+22     	; 0xbce <__vector_15+0x142>
     bb8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <data_fogad+0x1>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <__vector_15+0x136>
     bc0:	1b c4       	rjmp	.+2102   	; 0x13f8 <__stack+0x2f9>
     bc2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <data_fogad+0x7>
     bc6:	8e 3e       	cpi	r24, 0xEE	; 238
     bc8:	09 f0       	breq	.+2      	; 0xbcc <__vector_15+0x140>
     bca:	16 c4       	rjmp	.+2092   	; 0x13f8 <__stack+0x2f9>
     bcc:	32 c0       	rjmp	.+100    	; 0xc32 <__vector_15+0x1a6>
     bce:	82 32       	cpi	r24, 0x22	; 34
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_15+0x148>
     bd2:	12 c4       	rjmp	.+2084   	; 0x13f8 <__stack+0x2f9>
     bd4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <data_fogad+0x1>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	09 f0       	breq	.+2      	; 0xbde <__vector_15+0x152>
     bdc:	0d c4       	rjmp	.+2074   	; 0x13f8 <__stack+0x2f9>
     bde:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <data_fogad+0x8>
     be2:	8d 3d       	cpi	r24, 0xDD	; 221
     be4:	09 f0       	breq	.+2      	; 0xbe8 <__vector_15+0x15c>
     be6:	08 c4       	rjmp	.+2064   	; 0x13f8 <__stack+0x2f9>
     be8:	0f c2       	rjmp	.+1054   	; 0x1008 <__vector_15+0x57c>
	{
		switch(data_fogad[0])	//3 vagy 8 vagy 9 byte hosszú üzenet
		{
			case 0x33:		//master lekérdezi, hogy van-e új elõzményüzenet
				if ((ujelozmeny[0]!=0)||(ujelozmeny[1]!=0)||(ujelozmeny[2]!=0))
     bea:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <ujelozmeny>
     bee:	21 11       	cpse	r18, r1
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <__vector_15+0x176>
     bf2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <ujelozmeny+0x1>
     bf6:	81 11       	cpse	r24, r1
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__vector_15+0x176>
     bfa:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <ujelozmeny+0x2>
     bfe:	88 23       	and	r24, r24
     c00:	61 f0       	breq	.+24     	; 0xc1a <__vector_15+0x18e>
				{
					data[0]=ujelozmeny[1]|(ujelozmeny[2]<<3);
     c02:	ef e0       	ldi	r30, 0x0F	; 15
     c04:	f3 e0       	ldi	r31, 0x03	; 3
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	98 2f       	mov	r25, r24
     c0a:	99 0f       	add	r25, r25
     c0c:	99 0f       	add	r25, r25
     c0e:	99 0f       	add	r25, r25
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	89 2b       	or	r24, r25
     c14:	89 83       	std	Y+1, r24	; 0x01
					data[1]=ujelozmeny[0];
     c16:	2a 83       	std	Y+2, r18	; 0x02
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <__vector_15+0x192>
				}
				else
				{
					data[0]=0;
     c1a:	19 82       	std	Y+1, r1	; 0x01
					data[1]=0;
     c1c:	1a 82       	std	Y+2, r1	; 0x02
				}
				RS_adatkuldes(data);
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
     c26:	ef e0       	ldi	r30, 0x0F	; 15
     c28:	f3 e0       	ldi	r31, 0x03	; 3
     c2a:	10 82       	st	Z, r1
	ujelozmeny[1]=muvelet;
     c2c:	11 82       	std	Z+1, r1	; 0x01
	ujelozmeny[2]=siker;
     c2e:	12 82       	std	Z+2, r1	; 0x02
     c30:	db c3       	rjmp	.+1974   	; 0x13e8 <__stack+0x2e9>
				}
				RS_adatkuldes(data);
				elozmeny_kuldes(0, 0, 0); 
				break;
			case 0x11:		//nyitás, zárás, zárolás, zárolás feloldás, felszabadítás kezdeményezése távolról
				if((data_fogad[3]<5)&&(data_fogad[3]>0))		//szekrenyszam ellenorzes
     c32:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <data_fogad+0x3>
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	82 0f       	add	r24, r18
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__vector_15+0x1b4>
     c3e:	da c1       	rjmp	.+948    	; 0xff4 <__vector_15+0x568>
				{
					if ((adatbazis[data_fogad[3]-1][3]<3)||(adatbazis[data_fogad[3]-1][3]==5))
     c40:	82 2f       	mov	r24, r18
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	dc 01       	movw	r26, r24
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	fd 01       	movw	r30, r26
     c4a:	e2 95       	swap	r30
     c4c:	f2 95       	swap	r31
     c4e:	f0 7f       	andi	r31, 0xF0	; 240
     c50:	fe 27       	eor	r31, r30
     c52:	e0 7f       	andi	r30, 0xF0	; 240
     c54:	fe 27       	eor	r31, r30
     c56:	eb 5e       	subi	r30, 0xEB	; 235
     c58:	fc 4f       	sbci	r31, 0xFC	; 252
     c5a:	44 85       	ldd	r20, Z+12	; 0x0c
     c5c:	55 85       	ldd	r21, Z+13	; 0x0d
     c5e:	66 85       	ldd	r22, Z+14	; 0x0e
     c60:	77 85       	ldd	r23, Z+15	; 0x0f
     c62:	43 30       	cpi	r20, 0x03	; 3
     c64:	51 05       	cpc	r21, r1
     c66:	61 05       	cpc	r22, r1
     c68:	71 05       	cpc	r23, r1
     c6a:	30 f0       	brcs	.+12     	; 0xc78 <__vector_15+0x1ec>
     c6c:	45 30       	cpi	r20, 0x05	; 5
     c6e:	51 05       	cpc	r21, r1
     c70:	61 05       	cpc	r22, r1
     c72:	71 05       	cpc	r23, r1
     c74:	09 f0       	breq	.+2      	; 0xc78 <__vector_15+0x1ec>
     c76:	b4 c1       	rjmp	.+872    	; 0xfe0 <__vector_15+0x554>
					{
						switch(data_fogad[2])
     c78:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <data_fogad+0x2>
     c7c:	31 30       	cpi	r19, 0x01	; 1
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_15+0x1f6>
     c80:	a7 c0       	rjmp	.+334    	; 0xdd0 <__vector_15+0x344>
     c82:	20 f0       	brcs	.+8      	; 0xc8c <__vector_15+0x200>
     c84:	32 30       	cpi	r19, 0x02	; 2
     c86:	09 f4       	brne	.+2      	; 0xc8a <__vector_15+0x1fe>
     c88:	53 c1       	rjmp	.+678    	; 0xf30 <__vector_15+0x4a4>
     c8a:	ae c3       	rjmp	.+1884   	; 0x13e8 <__stack+0x2e9>
						{
							case 0: if ((((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16))==adatbazis[data_fogad[3]-1][1])
     c8c:	e4 e0       	ldi	r30, 0x04	; 4
     c8e:	f3 e0       	ldi	r31, 0x03	; 3
     c90:	c5 80       	ldd	r12, Z+5	; 0x05
     c92:	d1 2c       	mov	r13, r1
     c94:	e1 2c       	mov	r14, r1
     c96:	f1 2c       	mov	r15, r1
     c98:	88 24       	eor	r8, r8
     c9a:	9c 2c       	mov	r9, r12
     c9c:	ad 2c       	mov	r10, r13
     c9e:	be 2c       	mov	r11, r14
     ca0:	c6 80       	ldd	r12, Z+6	; 0x06
     ca2:	d1 2c       	mov	r13, r1
     ca4:	e1 2c       	mov	r14, r1
     ca6:	f1 2c       	mov	r15, r1
     ca8:	76 01       	movw	r14, r12
     caa:	dd 24       	eor	r13, r13
     cac:	cc 24       	eor	r12, r12
     cae:	c8 0c       	add	r12, r8
     cb0:	d9 1c       	adc	r13, r9
     cb2:	ea 1c       	adc	r14, r10
     cb4:	fb 1c       	adc	r15, r11
     cb6:	34 81       	ldd	r19, Z+4	; 0x04
     cb8:	c3 0e       	add	r12, r19
     cba:	d1 1c       	adc	r13, r1
     cbc:	e1 1c       	adc	r14, r1
     cbe:	f1 1c       	adc	r15, r1
     cc0:	fd 01       	movw	r30, r26
     cc2:	e2 95       	swap	r30
     cc4:	f2 95       	swap	r31
     cc6:	f0 7f       	andi	r31, 0xF0	; 240
     cc8:	fe 27       	eor	r31, r30
     cca:	e0 7f       	andi	r30, 0xF0	; 240
     ccc:	fe 27       	eor	r31, r30
     cce:	eb 5e       	subi	r30, 0xEB	; 235
     cd0:	fc 4f       	sbci	r31, 0xFC	; 252
     cd2:	84 80       	ldd	r8, Z+4	; 0x04
     cd4:	95 80       	ldd	r9, Z+5	; 0x05
     cd6:	a6 80       	ldd	r10, Z+6	; 0x06
     cd8:	b7 80       	ldd	r11, Z+7	; 0x07
     cda:	c8 14       	cp	r12, r8
     cdc:	d9 04       	cpc	r13, r9
     cde:	ea 04       	cpc	r14, r10
     ce0:	fb 04       	cpc	r15, r11
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_15+0x25a>
     ce4:	47 c0       	rjmp	.+142    	; 0xd74 <__vector_15+0x2e8>
									{
										adatbazis[data_fogad[3]-1][3]=0;	//nyitás
     ce6:	cd 01       	movw	r24, r26
     ce8:	82 95       	swap	r24
     cea:	92 95       	swap	r25
     cec:	90 7f       	andi	r25, 0xF0	; 240
     cee:	98 27       	eor	r25, r24
     cf0:	80 7f       	andi	r24, 0xF0	; 240
     cf2:	98 27       	eor	r25, r24
     cf4:	fc 01       	movw	r30, r24
     cf6:	eb 5e       	subi	r30, 0xEB	; 235
     cf8:	fc 4f       	sbci	r31, 0xFC	; 252
     cfa:	14 86       	std	Z+12, r1	; 0x0c
     cfc:	15 86       	std	Z+13, r1	; 0x0d
     cfe:	16 86       	std	Z+14, r1	; 0x0e
     d00:	17 86       	std	Z+15, r1	; 0x0f
										eeprom_iras(0, 3, data_fogad[3]);
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	cb 01       	movw	r24, r22
     d0a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										adatbazis[data_fogad[3]-1][2]=0;
     d0e:	04 e0       	ldi	r16, 0x04	; 4
     d10:	13 e0       	ldi	r17, 0x03	; 3
     d12:	f8 01       	movw	r30, r16
     d14:	23 81       	ldd	r18, Z+3	; 0x03
     d16:	30 e1       	ldi	r19, 0x10	; 16
     d18:	23 9f       	mul	r18, r19
     d1a:	f0 01       	movw	r30, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	eb 5f       	subi	r30, 0xFB	; 251
     d20:	fc 4f       	sbci	r31, 0xFC	; 252
     d22:	10 86       	std	Z+8, r1	; 0x08
     d24:	11 86       	std	Z+9, r1	; 0x09
     d26:	12 86       	std	Z+10, r1	; 0x0a
     d28:	13 86       	std	Z+11, r1	; 0x0b
										eeprom_iras(0, 2, data_fogad[3]);
     d2a:	42 e0       	ldi	r20, 0x02	; 2
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										
										switch(data_fogad[3])
     d36:	f8 01       	movw	r30, r16
     d38:	83 81       	ldd	r24, Z+3	; 0x03
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	61 f0       	breq	.+24     	; 0xd56 <__vector_15+0x2ca>
     d3e:	18 f4       	brcc	.+6      	; 0xd46 <__vector_15+0x2ba>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	31 f0       	breq	.+12     	; 0xd50 <__vector_15+0x2c4>
     d44:	0d c0       	rjmp	.+26     	; 0xd60 <__vector_15+0x2d4>
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	41 f0       	breq	.+16     	; 0xd5a <__vector_15+0x2ce>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	41 f0       	breq	.+16     	; 0xd5e <__vector_15+0x2d2>
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <__vector_15+0x2d4>
										{
											case 1: PORTD|=8<<4; PORTA=0; break;
     d50:	97 9a       	sbi	0x12, 7	; 18
     d52:	1b ba       	out	0x1b, r1	; 27
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__vector_15+0x2d4>
											case 2: PORTD|=4<<4; break;
     d56:	96 9a       	sbi	0x12, 6	; 18
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <__vector_15+0x2d4>
											case 3: PORTD|=2<<4; break;
     d5a:	95 9a       	sbi	0x12, 5	; 18
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <__vector_15+0x2d4>
											case 4: PORTD|=1<<4; break;
     d5e:	94 9a       	sbi	0x12, 4	; 18
										}
										
										data[0]=(1<<7);
     d60:	80 e8       	ldi	r24, 0x80	; 128
     d62:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     d64:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
     d68:	8a 83       	std	Y+2, r24	; 0x02
										RS_adatkuldes(data);
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     d72:	3a c3       	rjmp	.+1652   	; 0x13e8 <__stack+0x2e9>
									}
									else if (adatbazis[data_fogad[3]-1][3]==5)		//felszabadított hibaüzenet
     d74:	45 30       	cpi	r20, 0x05	; 5
     d76:	51 05       	cpc	r21, r1
     d78:	61 05       	cpc	r22, r1
     d7a:	71 05       	cpc	r23, r1
     d7c:	41 f4       	brne	.+16     	; 0xd8e <__vector_15+0x302>
									{
										data[0]=(3<<3)|(1<<7);
     d7e:	88 e9       	ldi	r24, 0x98	; 152
     d80:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     d82:	2a 83       	std	Y+2, r18	; 0x02
										RS_adatkuldes(data);
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     d8c:	2d c3       	rjmp	.+1626   	; 0x13e8 <__stack+0x2e9>
									}
									else	//hibás kód
									{
										adatbazis[data_fogad[3]-1][3]++;
     d8e:	cb 01       	movw	r24, r22
     d90:	ba 01       	movw	r22, r20
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	ad 01       	movw	r20, r26
     d9c:	42 95       	swap	r20
     d9e:	52 95       	swap	r21
     da0:	50 7f       	andi	r21, 0xF0	; 240
     da2:	54 27       	eor	r21, r20
     da4:	40 7f       	andi	r20, 0xF0	; 240
     da6:	54 27       	eor	r21, r20
     da8:	fa 01       	movw	r30, r20
     daa:	eb 5e       	subi	r30, 0xEB	; 235
     dac:	fc 4f       	sbci	r31, 0xFC	; 252
     dae:	64 87       	std	Z+12, r22	; 0x0c
     db0:	75 87       	std	Z+13, r23	; 0x0d
     db2:	86 87       	std	Z+14, r24	; 0x0e
     db4:	97 87       	std	Z+15, r25	; 0x0f
										eeprom_iras(adatbazis[data_fogad[3]-1][3], 3, data_fogad[3]);
     db6:	43 e0       	ldi	r20, 0x03	; 3
     db8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										
										data[0]=(1<<3)|(1<<7);
     dbc:	88 e8       	ldi	r24, 0x88	; 136
     dbe:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     dc0:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
     dc4:	8a 83       	std	Y+2, r24	; 0x02
										RS_adatkuldes(data);
     dc6:	ce 01       	movw	r24, r28
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     dce:	0c c3       	rjmp	.+1560   	; 0x13e8 <__stack+0x2e9>
									}
									break;
							case 1: if ((((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16))==adatbazis[data_fogad[3]-1][1])
     dd0:	e4 e0       	ldi	r30, 0x04	; 4
     dd2:	f3 e0       	ldi	r31, 0x03	; 3
     dd4:	c5 80       	ldd	r12, Z+5	; 0x05
     dd6:	d1 2c       	mov	r13, r1
     dd8:	e1 2c       	mov	r14, r1
     dda:	f1 2c       	mov	r15, r1
     ddc:	88 24       	eor	r8, r8
     dde:	9c 2c       	mov	r9, r12
     de0:	ad 2c       	mov	r10, r13
     de2:	be 2c       	mov	r11, r14
     de4:	c6 80       	ldd	r12, Z+6	; 0x06
     de6:	d1 2c       	mov	r13, r1
     de8:	e1 2c       	mov	r14, r1
     dea:	f1 2c       	mov	r15, r1
     dec:	76 01       	movw	r14, r12
     dee:	dd 24       	eor	r13, r13
     df0:	cc 24       	eor	r12, r12
     df2:	c8 0c       	add	r12, r8
     df4:	d9 1c       	adc	r13, r9
     df6:	ea 1c       	adc	r14, r10
     df8:	fb 1c       	adc	r15, r11
     dfa:	34 81       	ldd	r19, Z+4	; 0x04
     dfc:	c3 0e       	add	r12, r19
     dfe:	d1 1c       	adc	r13, r1
     e00:	e1 1c       	adc	r14, r1
     e02:	f1 1c       	adc	r15, r1
     e04:	fd 01       	movw	r30, r26
     e06:	e2 95       	swap	r30
     e08:	f2 95       	swap	r31
     e0a:	f0 7f       	andi	r31, 0xF0	; 240
     e0c:	fe 27       	eor	r31, r30
     e0e:	e0 7f       	andi	r30, 0xF0	; 240
     e10:	fe 27       	eor	r31, r30
     e12:	eb 5e       	subi	r30, 0xEB	; 235
     e14:	fc 4f       	sbci	r31, 0xFC	; 252
     e16:	84 80       	ldd	r8, Z+4	; 0x04
     e18:	95 80       	ldd	r9, Z+5	; 0x05
     e1a:	a6 80       	ldd	r10, Z+6	; 0x06
     e1c:	b7 80       	ldd	r11, Z+7	; 0x07
     e1e:	c8 14       	cp	r12, r8
     e20:	d9 04       	cpc	r13, r9
     e22:	ea 04       	cpc	r14, r10
     e24:	fb 04       	cpc	r15, r11
     e26:	09 f0       	breq	.+2      	; 0xe2a <__vector_15+0x39e>
     e28:	55 c0       	rjmp	.+170    	; 0xed4 <__vector_15+0x448>
									{
										adatbazis[data_fogad[3]-1][3]=0;	//zárás
     e2a:	cd 01       	movw	r24, r26
     e2c:	82 95       	swap	r24
     e2e:	92 95       	swap	r25
     e30:	90 7f       	andi	r25, 0xF0	; 240
     e32:	98 27       	eor	r25, r24
     e34:	80 7f       	andi	r24, 0xF0	; 240
     e36:	98 27       	eor	r25, r24
     e38:	fc 01       	movw	r30, r24
     e3a:	eb 5e       	subi	r30, 0xEB	; 235
     e3c:	fc 4f       	sbci	r31, 0xFC	; 252
     e3e:	14 86       	std	Z+12, r1	; 0x0c
     e40:	15 86       	std	Z+13, r1	; 0x0d
     e42:	16 86       	std	Z+14, r1	; 0x0e
     e44:	17 86       	std	Z+15, r1	; 0x0f
										eeprom_iras(0, 3, data_fogad[3]);
     e46:	43 e0       	ldi	r20, 0x03	; 3
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	cb 01       	movw	r24, r22
     e4e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										adatbazis[data_fogad[3]-1][2]=1;
     e52:	04 e0       	ldi	r16, 0x04	; 4
     e54:	13 e0       	ldi	r17, 0x03	; 3
     e56:	f8 01       	movw	r30, r16
     e58:	23 81       	ldd	r18, Z+3	; 0x03
     e5a:	30 e1       	ldi	r19, 0x10	; 16
     e5c:	23 9f       	mul	r18, r19
     e5e:	f0 01       	movw	r30, r0
     e60:	11 24       	eor	r1, r1
     e62:	eb 5f       	subi	r30, 0xFB	; 251
     e64:	fc 4f       	sbci	r31, 0xFC	; 252
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	80 87       	std	Z+8, r24	; 0x08
     e70:	91 87       	std	Z+9, r25	; 0x09
     e72:	a2 87       	std	Z+10, r26	; 0x0a
     e74:	b3 87       	std	Z+11, r27	; 0x0b
										eeprom_iras(1, 2, data_fogad[3]);
     e76:	42 e0       	ldi	r20, 0x02	; 2
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										
										switch(data_fogad[3])
     e84:	f8 01       	movw	r30, r16
     e86:	83 81       	ldd	r24, Z+3	; 0x03
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	79 f0       	breq	.+30     	; 0xeaa <__vector_15+0x41e>
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <__vector_15+0x408>
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	31 f0       	breq	.+12     	; 0xe9e <__vector_15+0x412>
     e92:	16 c0       	rjmp	.+44     	; 0xec0 <__vector_15+0x434>
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	69 f0       	breq	.+26     	; 0xeb2 <__vector_15+0x426>
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	79 f0       	breq	.+30     	; 0xeba <__vector_15+0x42e>
     e9c:	11 c0       	rjmp	.+34     	; 0xec0 <__vector_15+0x434>
										{
											case 1: PORTD&=7<<4; PORTA=0xFF; break;
     e9e:	82 b3       	in	r24, 0x12	; 18
     ea0:	80 77       	andi	r24, 0x70	; 112
     ea2:	82 bb       	out	0x12, r24	; 18
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	8b bb       	out	0x1b, r24	; 27
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <__vector_15+0x434>
											case 2: PORTD&=11<<4; break;
     eaa:	82 b3       	in	r24, 0x12	; 18
     eac:	80 7b       	andi	r24, 0xB0	; 176
     eae:	82 bb       	out	0x12, r24	; 18
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <__vector_15+0x434>
											case 3: PORTD&=13<<4; break;
     eb2:	82 b3       	in	r24, 0x12	; 18
     eb4:	80 7d       	andi	r24, 0xD0	; 208
     eb6:	82 bb       	out	0x12, r24	; 18
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <__vector_15+0x434>
											case 4: PORTD&=14<<4; break;
     eba:	82 b3       	in	r24, 0x12	; 18
     ebc:	80 7e       	andi	r24, 0xE0	; 224
     ebe:	82 bb       	out	0x12, r24	; 18
										}
								
										data[0]=1|(1<<7);
     ec0:	81 e8       	ldi	r24, 0x81	; 129
     ec2:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     ec4:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
     ec8:	8a 83       	std	Y+2, r24	; 0x02
										RS_adatkuldes(data);
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     ed2:	8a c2       	rjmp	.+1300   	; 0x13e8 <__stack+0x2e9>
									}
									else if (adatbazis[data_fogad[3]-1][3]==5)		//felszabadított hibaüzenet
     ed4:	45 30       	cpi	r20, 0x05	; 5
     ed6:	51 05       	cpc	r21, r1
     ed8:	61 05       	cpc	r22, r1
     eda:	71 05       	cpc	r23, r1
     edc:	41 f4       	brne	.+16     	; 0xeee <__vector_15+0x462>
									{
										data[0]=(3<<3)|1|(1<<7);
     ede:	89 e9       	ldi	r24, 0x99	; 153
     ee0:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     ee2:	2a 83       	std	Y+2, r18	; 0x02
										RS_adatkuldes(data);
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     eec:	7d c2       	rjmp	.+1274   	; 0x13e8 <__stack+0x2e9>
									}
									else	//hibás kód
									{
										adatbazis[data_fogad[3]-1][3]++;
     eee:	cb 01       	movw	r24, r22
     ef0:	ba 01       	movw	r22, r20
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	ad 01       	movw	r20, r26
     efc:	42 95       	swap	r20
     efe:	52 95       	swap	r21
     f00:	50 7f       	andi	r21, 0xF0	; 240
     f02:	54 27       	eor	r21, r20
     f04:	40 7f       	andi	r20, 0xF0	; 240
     f06:	54 27       	eor	r21, r20
     f08:	fa 01       	movw	r30, r20
     f0a:	eb 5e       	subi	r30, 0xEB	; 235
     f0c:	fc 4f       	sbci	r31, 0xFC	; 252
     f0e:	64 87       	std	Z+12, r22	; 0x0c
     f10:	75 87       	std	Z+13, r23	; 0x0d
     f12:	86 87       	std	Z+14, r24	; 0x0e
     f14:	97 87       	std	Z+15, r25	; 0x0f
										eeprom_iras(adatbazis[data_fogad[3]-1][3], 3, data_fogad[3]);
     f16:	43 e0       	ldi	r20, 0x03	; 3
     f18:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
								
										data[0]=(1<<3)|1|(1<<7);
     f1c:	89 e8       	ldi	r24, 0x89	; 137
     f1e:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     f20:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
     f24:	8a 83       	std	Y+2, r24	; 0x02
										RS_adatkuldes(data);
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     f2e:	5c c2       	rjmp	.+1208   	; 0x13e8 <__stack+0x2e9>
									}
									break;
							case 2: if (adatbazis[data_fogad[3]-1][3]==5)	//felszabaditott ertekadas
     f30:	45 30       	cpi	r20, 0x05	; 5
     f32:	51 05       	cpc	r21, r1
     f34:	61 05       	cpc	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	09 f0       	breq	.+2      	; 0xf3c <__vector_15+0x4b0>
     f3a:	4a c0       	rjmp	.+148    	; 0xfd0 <__vector_15+0x544>
									{
										adatbazis[data_fogad[3]-1][1]=(((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16));
     f3c:	04 e0       	ldi	r16, 0x04	; 4
     f3e:	13 e0       	ldi	r17, 0x03	; 3
     f40:	f8 01       	movw	r30, r16
     f42:	c5 80       	ldd	r12, Z+5	; 0x05
     f44:	d1 2c       	mov	r13, r1
     f46:	e1 2c       	mov	r14, r1
     f48:	f1 2c       	mov	r15, r1
     f4a:	fe 2c       	mov	r15, r14
     f4c:	ed 2c       	mov	r14, r13
     f4e:	dc 2c       	mov	r13, r12
     f50:	cc 24       	eor	r12, r12
     f52:	46 81       	ldd	r20, Z+6	; 0x06
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	ba 01       	movw	r22, r20
     f5c:	55 27       	eor	r21, r21
     f5e:	44 27       	eor	r20, r20
     f60:	c4 0e       	add	r12, r20
     f62:	d5 1e       	adc	r13, r21
     f64:	e6 1e       	adc	r14, r22
     f66:	f7 1e       	adc	r15, r23
     f68:	34 81       	ldd	r19, Z+4	; 0x04
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	63 0f       	add	r22, r19
     f70:	71 1d       	adc	r23, r1
     f72:	81 1d       	adc	r24, r1
     f74:	91 1d       	adc	r25, r1
     f76:	ad 01       	movw	r20, r26
     f78:	42 95       	swap	r20
     f7a:	52 95       	swap	r21
     f7c:	50 7f       	andi	r21, 0xF0	; 240
     f7e:	54 27       	eor	r21, r20
     f80:	40 7f       	andi	r20, 0xF0	; 240
     f82:	54 27       	eor	r21, r20
     f84:	fa 01       	movw	r30, r20
     f86:	eb 5e       	subi	r30, 0xEB	; 235
     f88:	fc 4f       	sbci	r31, 0xFC	; 252
     f8a:	64 83       	std	Z+4, r22	; 0x04
     f8c:	75 83       	std	Z+5, r23	; 0x05
     f8e:	86 83       	std	Z+6, r24	; 0x06
     f90:	97 83       	std	Z+7, r25	; 0x07
										eeprom_iras(adatbazis[data_fogad[3]-1][1], 1, data_fogad[3]);
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										adatbazis[data_fogad[3]-1][3]=0;
     f98:	f8 01       	movw	r30, r16
     f9a:	23 81       	ldd	r18, Z+3	; 0x03
     f9c:	30 e1       	ldi	r19, 0x10	; 16
     f9e:	23 9f       	mul	r18, r19
     fa0:	f0 01       	movw	r30, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	eb 5f       	subi	r30, 0xFB	; 251
     fa6:	fc 4f       	sbci	r31, 0xFC	; 252
     fa8:	14 86       	std	Z+12, r1	; 0x0c
     faa:	15 86       	std	Z+13, r1	; 0x0d
     fac:	16 86       	std	Z+14, r1	; 0x0e
     fae:	17 86       	std	Z+15, r1	; 0x0f
										eeprom_iras(0, 3, data_fogad[3]);
     fb0:	43 e0       	ldi	r20, 0x03	; 3
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	cb 01       	movw	r24, r22
     fb8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
										
										data[0]=2|(1<<7);
     fbc:	82 e8       	ldi	r24, 0x82	; 130
     fbe:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     fc0:	f8 01       	movw	r30, r16
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	8a 83       	std	Y+2, r24	; 0x02
										RS_adatkuldes(data);
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     fce:	0c c2       	rjmp	.+1048   	; 0x13e8 <__stack+0x2e9>
									}
									else	//zárolt hibaüzenet
									{
										data[0]=(2<<3)|(1<<7);
     fd0:	80 e9       	ldi	r24, 0x90	; 144
     fd2:	89 83       	std	Y+1, r24	; 0x01
										data[1]=data_fogad[3];
     fd4:	2a 83       	std	Y+2, r18	; 0x02
										RS_adatkuldes(data);
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     fde:	04 c2       	rjmp	.+1032   	; 0x13e8 <__stack+0x2e9>
									break;
						}
					}
					else	//zárolt hibaüzenet
					{
						data[0]=(2<<3)|data_fogad[2]|(1<<7);
     fe0:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <data_fogad+0x2>
     fe4:	80 69       	ori	r24, 0x90	; 144
     fe6:	89 83       	std	Y+1, r24	; 0x01
						data[1]=data_fogad[3];
     fe8:	2a 83       	std	Y+2, r18	; 0x02
						RS_adatkuldes(data);
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
     ff2:	fa c1       	rjmp	.+1012   	; 0x13e8 <__stack+0x2e9>
					}
				}
				else
				{
					data[0]=(1<<3)|data_fogad[2]|(1<<7);
     ff4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <data_fogad+0x2>
     ff8:	88 68       	ori	r24, 0x88	; 136
     ffa:	89 83       	std	Y+1, r24	; 0x01
					data[1]=data_fogad[3];
     ffc:	2a 83       	std	Y+2, r18	; 0x02
					RS_adatkuldes(data);
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    1006:	f0 c1       	rjmp	.+992    	; 0x13e8 <__stack+0x2e9>
				}
				break;
			case 0x22:		//Kód módosítás
				if((data_fogad[2]<5)&&(data_fogad[2]>0))		//szekrenyszam
    1008:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <data_fogad+0x2>
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	82 0f       	add	r24, r18
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	08 f0       	brcs	.+2      	; 0x1016 <__vector_15+0x58a>
    1014:	ca c0       	rjmp	.+404    	; 0x11aa <__stack+0xab>
				{
					if (adatbazis[data_fogad[2]-1][3]<3)
    1016:	82 2f       	mov	r24, r18
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	dc 01       	movw	r26, r24
    101c:	11 97       	sbiw	r26, 0x01	; 1
    101e:	fd 01       	movw	r30, r26
    1020:	e2 95       	swap	r30
    1022:	f2 95       	swap	r31
    1024:	f0 7f       	andi	r31, 0xF0	; 240
    1026:	fe 27       	eor	r31, r30
    1028:	e0 7f       	andi	r30, 0xF0	; 240
    102a:	fe 27       	eor	r31, r30
    102c:	eb 5e       	subi	r30, 0xEB	; 235
    102e:	fc 4f       	sbci	r31, 0xFC	; 252
    1030:	44 85       	ldd	r20, Z+12	; 0x0c
    1032:	55 85       	ldd	r21, Z+13	; 0x0d
    1034:	66 85       	ldd	r22, Z+14	; 0x0e
    1036:	77 85       	ldd	r23, Z+15	; 0x0f
    1038:	43 30       	cpi	r20, 0x03	; 3
    103a:	51 05       	cpc	r21, r1
    103c:	61 05       	cpc	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	08 f0       	brcs	.+2      	; 0x1044 <__vector_15+0x5b8>
    1042:	9e c0       	rjmp	.+316    	; 0x1180 <__stack+0x81>
					{
						if ((((unsigned long int)data_fogad[3])+(((unsigned long int)data_fogad[4])<<8)+(((unsigned long int)data_fogad[5]&0b00001111)<<16))==adatbazis[data_fogad[2]-1][1])
    1044:	e4 e0       	ldi	r30, 0x04	; 4
    1046:	f3 e0       	ldi	r31, 0x03	; 3
    1048:	35 81       	ldd	r19, Z+5	; 0x05
    104a:	c4 80       	ldd	r12, Z+4	; 0x04
    104c:	d1 2c       	mov	r13, r1
    104e:	e1 2c       	mov	r14, r1
    1050:	f1 2c       	mov	r15, r1
    1052:	fe 2c       	mov	r15, r14
    1054:	ed 2c       	mov	r14, r13
    1056:	dc 2c       	mov	r13, r12
    1058:	cc 24       	eor	r12, r12
    105a:	e3 81       	ldd	r30, Z+3	; 0x03
    105c:	46 01       	movw	r8, r12
    105e:	57 01       	movw	r10, r14
    1060:	8e 0e       	add	r8, r30
    1062:	91 1c       	adc	r9, r1
    1064:	a1 1c       	adc	r10, r1
    1066:	b1 1c       	adc	r11, r1
    1068:	83 2f       	mov	r24, r19
    106a:	8f 70       	andi	r24, 0x0F	; 15
    106c:	c8 2e       	mov	r12, r24
    106e:	d1 2c       	mov	r13, r1
    1070:	e1 2c       	mov	r14, r1
    1072:	f1 2c       	mov	r15, r1
    1074:	76 01       	movw	r14, r12
    1076:	dd 24       	eor	r13, r13
    1078:	cc 24       	eor	r12, r12
    107a:	c8 0c       	add	r12, r8
    107c:	d9 1c       	adc	r13, r9
    107e:	ea 1c       	adc	r14, r10
    1080:	fb 1c       	adc	r15, r11
    1082:	fd 01       	movw	r30, r26
    1084:	e2 95       	swap	r30
    1086:	f2 95       	swap	r31
    1088:	f0 7f       	andi	r31, 0xF0	; 240
    108a:	fe 27       	eor	r31, r30
    108c:	e0 7f       	andi	r30, 0xF0	; 240
    108e:	fe 27       	eor	r31, r30
    1090:	eb 5e       	subi	r30, 0xEB	; 235
    1092:	fc 4f       	sbci	r31, 0xFC	; 252
    1094:	84 80       	ldd	r8, Z+4	; 0x04
    1096:	95 80       	ldd	r9, Z+5	; 0x05
    1098:	a6 80       	ldd	r10, Z+6	; 0x06
    109a:	b7 80       	ldd	r11, Z+7	; 0x07
    109c:	c8 14       	cp	r12, r8
    109e:	d9 04       	cpc	r13, r9
    10a0:	ea 04       	cpc	r14, r10
    10a2:	fb 04       	cpc	r15, r11
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <__vector_15+0x61c>
    10a6:	4b c0       	rjmp	.+150    	; 0x113e <__stack+0x3f>
						{
							adatbazis[data_fogad[2]-1][1]=(((unsigned long int)data_fogad[5]&0b11110000)>>4)+(((unsigned long int)data_fogad[6])<<4)+(((unsigned long int)data_fogad[7])<<12);
    10a8:	04 e0       	ldi	r16, 0x04	; 4
    10aa:	13 e0       	ldi	r17, 0x03	; 3
    10ac:	f8 01       	movw	r30, r16
    10ae:	46 81       	ldd	r20, Z+6	; 0x06
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	66 1f       	adc	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	44 0f       	add	r20, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	66 1f       	adc	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	44 0f       	add	r20, r20
    10c8:	55 1f       	adc	r21, r21
    10ca:	66 1f       	adc	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	32 95       	swap	r19
    10d8:	3f 70       	andi	r19, 0x0F	; 15
    10da:	43 0f       	add	r20, r19
    10dc:	51 1d       	adc	r21, r1
    10de:	61 1d       	adc	r22, r1
    10e0:	71 1d       	adc	r23, r1
    10e2:	c7 80       	ldd	r12, Z+7	; 0x07
    10e4:	d1 2c       	mov	r13, r1
    10e6:	e1 2c       	mov	r14, r1
    10e8:	f1 2c       	mov	r15, r1
    10ea:	0b 2e       	mov	r0, r27
    10ec:	bc e0       	ldi	r27, 0x0C	; 12
    10ee:	cc 0c       	add	r12, r12
    10f0:	dd 1c       	adc	r13, r13
    10f2:	ee 1c       	adc	r14, r14
    10f4:	ff 1c       	adc	r15, r15
    10f6:	ba 95       	dec	r27
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <__vector_15+0x662>
    10fa:	b0 2d       	mov	r27, r0
    10fc:	cb 01       	movw	r24, r22
    10fe:	ba 01       	movw	r22, r20
    1100:	6c 0d       	add	r22, r12
    1102:	7d 1d       	adc	r23, r13
    1104:	8e 1d       	adc	r24, r14
    1106:	9f 1d       	adc	r25, r15
    1108:	ad 01       	movw	r20, r26
    110a:	42 95       	swap	r20
    110c:	52 95       	swap	r21
    110e:	50 7f       	andi	r21, 0xF0	; 240
    1110:	54 27       	eor	r21, r20
    1112:	40 7f       	andi	r20, 0xF0	; 240
    1114:	54 27       	eor	r21, r20
    1116:	fa 01       	movw	r30, r20
    1118:	eb 5e       	subi	r30, 0xEB	; 235
    111a:	fc 4f       	sbci	r31, 0xFC	; 252
    111c:	64 83       	std	Z+4, r22	; 0x04
    111e:	75 83       	std	Z+5, r23	; 0x05
    1120:	86 83       	std	Z+6, r24	; 0x06
    1122:	97 83       	std	Z+7, r25	; 0x07
							eeprom_iras(adatbazis[data_fogad[2]-1][1], 1, data_fogad[2]);
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
							
							data[0]=(1<<3)|3|(1<<7);
    112a:	8b e8       	ldi	r24, 0x8B	; 139
    112c:	89 83       	std	Y+1, r24	; 0x01
							data[1]=data_fogad[2];
    112e:	f8 01       	movw	r30, r16
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	8a 83       	std	Y+2, r24	; 0x02
							RS_adatkuldes(data);
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    113c:	55 c1       	rjmp	.+682    	; 0x13e8 <__stack+0x2e9>
						}
						else
						{
							adatbazis[data_fogad[2]-1][3]++;
    113e:	cb 01       	movw	r24, r22
    1140:	ba 01       	movw	r22, r20
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	ad 01       	movw	r20, r26
    114c:	42 95       	swap	r20
    114e:	52 95       	swap	r21
    1150:	50 7f       	andi	r21, 0xF0	; 240
    1152:	54 27       	eor	r21, r20
    1154:	40 7f       	andi	r20, 0xF0	; 240
    1156:	54 27       	eor	r21, r20
    1158:	fa 01       	movw	r30, r20
    115a:	eb 5e       	subi	r30, 0xEB	; 235
    115c:	fc 4f       	sbci	r31, 0xFC	; 252
    115e:	64 87       	std	Z+12, r22	; 0x0c
    1160:	75 87       	std	Z+13, r23	; 0x0d
    1162:	86 87       	std	Z+14, r24	; 0x0e
    1164:	97 87       	std	Z+15, r25	; 0x0f
							eeprom_iras(adatbazis[data_fogad[2]-1][3], 3, data_fogad[2]);
    1166:	43 e0       	ldi	r20, 0x03	; 3
    1168:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
							
							data[0]=(1<<3)|3|(1<<7);
    116c:	8b e8       	ldi	r24, 0x8B	; 139
    116e:	89 83       	std	Y+1, r24	; 0x01
							data[1]=data_fogad[2];
    1170:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <data_fogad+0x2>
    1174:	8a 83       	std	Y+2, r24	; 0x02
							RS_adatkuldes(data);
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    117e:	34 c1       	rjmp	.+616    	; 0x13e8 <__stack+0x2e9>
						}
					}
					else if (adatbazis[data_fogad[2]-1][3]==5)		//felszabadított hibaüzenet
    1180:	45 30       	cpi	r20, 0x05	; 5
    1182:	51 05       	cpc	r21, r1
    1184:	61 05       	cpc	r22, r1
    1186:	71 05       	cpc	r23, r1
    1188:	41 f4       	brne	.+16     	; 0x119a <__stack+0x9b>
					{
						data[0]=(3<<3)|3|(1<<7);
    118a:	8b e9       	ldi	r24, 0x9B	; 155
    118c:	89 83       	std	Y+1, r24	; 0x01
						data[1]=data_fogad[2];
    118e:	2a 83       	std	Y+2, r18	; 0x02
						RS_adatkuldes(data);
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    1198:	27 c1       	rjmp	.+590    	; 0x13e8 <__stack+0x2e9>
					}
					else	//zárolt hibaüzenet
					{
						data[0]=(2<<3)|3|(1<<7);
    119a:	83 e9       	ldi	r24, 0x93	; 147
    119c:	89 83       	std	Y+1, r24	; 0x01
						data[1]=data_fogad[2];
    119e:	2a 83       	std	Y+2, r18	; 0x02
						RS_adatkuldes(data);
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    11a8:	1f c1       	rjmp	.+574    	; 0x13e8 <__stack+0x2e9>
					}	
				}
				else
				{
					data[0]=(1<<3)|3|(1<<7);
    11aa:	8b e8       	ldi	r24, 0x8B	; 139
    11ac:	89 83       	std	Y+1, r24	; 0x01
					data[1]=data_fogad[2];
    11ae:	2a 83       	std	Y+2, r18	; 0x02
					RS_adatkuldes(data);
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    11b8:	17 c1       	rjmp	.+558    	; 0x13e8 <__stack+0x2e9>
				}
				break;
			case 0x55:											//ADMIN
				if((data_fogad[3]<5)&&(data_fogad[3]>0))		//szekrenyszam
    11ba:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <data_fogad+0x3>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	82 0f       	add	r24, r18
    11c2:	84 30       	cpi	r24, 0x04	; 4
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <__stack+0xc9>
    11c6:	07 c1       	rjmp	.+526    	; 0x13d6 <__stack+0x2d7>
				{
					switch(data_fogad[2]&0b111)
    11c8:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <data_fogad+0x2>
    11cc:	89 2f       	mov	r24, r25
    11ce:	87 70       	andi	r24, 0x07	; 7
    11d0:	85 30       	cpi	r24, 0x05	; 5
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <__stack+0xd7>
    11d4:	5b c0       	rjmp	.+182    	; 0x128c <__stack+0x18d>
    11d6:	86 30       	cpi	r24, 0x06	; 6
    11d8:	09 f4       	brne	.+2      	; 0x11dc <__stack+0xdd>
    11da:	a8 c0       	rjmp	.+336    	; 0x132c <__stack+0x22d>
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__stack+0xe3>
    11e0:	03 c1       	rjmp	.+518    	; 0x13e8 <__stack+0x2e9>
					{
						case 4: if ((((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16)+(((unsigned long int)data_fogad[2]>>3)<<24))==admin_kod)
    11e2:	e4 e0       	ldi	r30, 0x04	; 4
    11e4:	f3 e0       	ldi	r31, 0x03	; 3
    11e6:	45 81       	ldd	r20, Z+5	; 0x05
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	cc 24       	eor	r12, r12
    11f0:	d4 2e       	mov	r13, r20
    11f2:	e5 2e       	mov	r14, r21
    11f4:	f6 2e       	mov	r15, r22
    11f6:	46 81       	ldd	r20, Z+6	; 0x06
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	ba 01       	movw	r22, r20
    1200:	55 27       	eor	r21, r21
    1202:	44 27       	eor	r20, r20
    1204:	4c 0d       	add	r20, r12
    1206:	5d 1d       	adc	r21, r13
    1208:	6e 1d       	adc	r22, r14
    120a:	7f 1d       	adc	r23, r15
    120c:	84 81       	ldd	r24, Z+4	; 0x04
    120e:	48 0f       	add	r20, r24
    1210:	51 1d       	adc	r21, r1
    1212:	61 1d       	adc	r22, r1
    1214:	71 1d       	adc	r23, r1
    1216:	89 2f       	mov	r24, r25
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	86 95       	lsr	r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	b8 2f       	mov	r27, r24
    1226:	aa 27       	eor	r26, r26
    1228:	99 27       	eor	r25, r25
    122a:	88 27       	eor	r24, r24
    122c:	48 0f       	add	r20, r24
    122e:	59 1f       	adc	r21, r25
    1230:	6a 1f       	adc	r22, r26
    1232:	7b 1f       	adc	r23, r27
    1234:	4f 3f       	cpi	r20, 0xFF	; 255
    1236:	50 4e       	sbci	r21, 0xE0	; 224
    1238:	65 4f       	sbci	r22, 0xF5	; 245
    123a:	75 40       	sbci	r23, 0x05	; 5
    123c:	f9 f4       	brne	.+62     	; 0x127c <__stack+0x17d>
								{
									adatbazis[data_fogad[3]-1][3]=4;
    123e:	30 e1       	ldi	r19, 0x10	; 16
    1240:	23 9f       	mul	r18, r19
    1242:	f0 01       	movw	r30, r0
    1244:	11 24       	eor	r1, r1
    1246:	eb 5f       	subi	r30, 0xFB	; 251
    1248:	fc 4f       	sbci	r31, 0xFC	; 252
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	84 87       	std	Z+12, r24	; 0x0c
    1254:	95 87       	std	Z+13, r25	; 0x0d
    1256:	a6 87       	std	Z+14, r26	; 0x0e
    1258:	b7 87       	std	Z+15, r27	; 0x0f
									eeprom_iras(4, 3, data_fogad[3]);
    125a:	43 e0       	ldi	r20, 0x03	; 3
    125c:	64 e0       	ldi	r22, 0x04	; 4
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
									
									data[0]=4|(1<<7);
    1268:	84 e8       	ldi	r24, 0x84	; 132
    126a:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    126c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
    1270:	8a 83       	std	Y+2, r24	; 0x02
									RS_adatkuldes(data);
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    127a:	b6 c0       	rjmp	.+364    	; 0x13e8 <__stack+0x2e9>
								}
								else
								{
									data[0]=(1<<3)|4|(1<<7);
    127c:	8c e8       	ldi	r24, 0x8C	; 140
    127e:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    1280:	2a 83       	std	Y+2, r18	; 0x02
									RS_adatkuldes(data);
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    128a:	ae c0       	rjmp	.+348    	; 0x13e8 <__stack+0x2e9>
								}
								break;
						case 5: if ((((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16)+(((unsigned long int)data_fogad[2]>>3)<<24))==admin_kod)
    128c:	e4 e0       	ldi	r30, 0x04	; 4
    128e:	f3 e0       	ldi	r31, 0x03	; 3
    1290:	45 81       	ldd	r20, Z+5	; 0x05
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	cc 24       	eor	r12, r12
    129a:	d4 2e       	mov	r13, r20
    129c:	e5 2e       	mov	r14, r21
    129e:	f6 2e       	mov	r15, r22
    12a0:	46 81       	ldd	r20, Z+6	; 0x06
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	ba 01       	movw	r22, r20
    12aa:	55 27       	eor	r21, r21
    12ac:	44 27       	eor	r20, r20
    12ae:	4c 0d       	add	r20, r12
    12b0:	5d 1d       	adc	r21, r13
    12b2:	6e 1d       	adc	r22, r14
    12b4:	7f 1d       	adc	r23, r15
    12b6:	84 81       	ldd	r24, Z+4	; 0x04
    12b8:	48 0f       	add	r20, r24
    12ba:	51 1d       	adc	r21, r1
    12bc:	61 1d       	adc	r22, r1
    12be:	71 1d       	adc	r23, r1
    12c0:	89 2f       	mov	r24, r25
    12c2:	86 95       	lsr	r24
    12c4:	86 95       	lsr	r24
    12c6:	86 95       	lsr	r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	b8 2f       	mov	r27, r24
    12d0:	aa 27       	eor	r26, r26
    12d2:	99 27       	eor	r25, r25
    12d4:	88 27       	eor	r24, r24
    12d6:	48 0f       	add	r20, r24
    12d8:	59 1f       	adc	r21, r25
    12da:	6a 1f       	adc	r22, r26
    12dc:	7b 1f       	adc	r23, r27
    12de:	4f 3f       	cpi	r20, 0xFF	; 255
    12e0:	50 4e       	sbci	r21, 0xE0	; 224
    12e2:	65 4f       	sbci	r22, 0xF5	; 245
    12e4:	75 40       	sbci	r23, 0x05	; 5
    12e6:	d1 f4       	brne	.+52     	; 0x131c <__stack+0x21d>
								{
									adatbazis[data_fogad[3]-1][3]=0;
    12e8:	90 e1       	ldi	r25, 0x10	; 16
    12ea:	29 9f       	mul	r18, r25
    12ec:	f0 01       	movw	r30, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	eb 5f       	subi	r30, 0xFB	; 251
    12f2:	fc 4f       	sbci	r31, 0xFC	; 252
    12f4:	14 86       	std	Z+12, r1	; 0x0c
    12f6:	15 86       	std	Z+13, r1	; 0x0d
    12f8:	16 86       	std	Z+14, r1	; 0x0e
    12fa:	17 86       	std	Z+15, r1	; 0x0f
									eeprom_iras(0, 3, data_fogad[3]);
    12fc:	43 e0       	ldi	r20, 0x03	; 3
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	cb 01       	movw	r24, r22
    1304:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
							
									data[0]=5|(1<<7);
    1308:	85 e8       	ldi	r24, 0x85	; 133
    130a:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    130c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
    1310:	8a 83       	std	Y+2, r24	; 0x02
									RS_adatkuldes(data);
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    131a:	66 c0       	rjmp	.+204    	; 0x13e8 <__stack+0x2e9>
								}
								else
								{
									data[0]=(1<<3)|5|(1<<7);
    131c:	8d e8       	ldi	r24, 0x8D	; 141
    131e:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    1320:	2a 83       	std	Y+2, r18	; 0x02
									RS_adatkuldes(data);
    1322:	ce 01       	movw	r24, r28
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    132a:	5e c0       	rjmp	.+188    	; 0x13e8 <__stack+0x2e9>
								}
								break;
						case 6: if ((((unsigned long int)data_fogad[4])+(((unsigned long int)data_fogad[5])<<8)+(((unsigned long int)data_fogad[6])<<16)+(((unsigned long int)data_fogad[2]>>3)<<24))==admin_kod)
    132c:	e4 e0       	ldi	r30, 0x04	; 4
    132e:	f3 e0       	ldi	r31, 0x03	; 3
    1330:	45 81       	ldd	r20, Z+5	; 0x05
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	cc 24       	eor	r12, r12
    133a:	d4 2e       	mov	r13, r20
    133c:	e5 2e       	mov	r14, r21
    133e:	f6 2e       	mov	r15, r22
    1340:	46 81       	ldd	r20, Z+6	; 0x06
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	ba 01       	movw	r22, r20
    134a:	55 27       	eor	r21, r21
    134c:	44 27       	eor	r20, r20
    134e:	4c 0d       	add	r20, r12
    1350:	5d 1d       	adc	r21, r13
    1352:	6e 1d       	adc	r22, r14
    1354:	7f 1d       	adc	r23, r15
    1356:	84 81       	ldd	r24, Z+4	; 0x04
    1358:	48 0f       	add	r20, r24
    135a:	51 1d       	adc	r21, r1
    135c:	61 1d       	adc	r22, r1
    135e:	71 1d       	adc	r23, r1
    1360:	89 2f       	mov	r24, r25
    1362:	86 95       	lsr	r24
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	b8 2f       	mov	r27, r24
    1370:	aa 27       	eor	r26, r26
    1372:	99 27       	eor	r25, r25
    1374:	88 27       	eor	r24, r24
    1376:	84 0f       	add	r24, r20
    1378:	95 1f       	adc	r25, r21
    137a:	a6 1f       	adc	r26, r22
    137c:	b7 1f       	adc	r27, r23
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	90 4e       	sbci	r25, 0xE0	; 224
    1382:	a5 4f       	sbci	r26, 0xF5	; 245
    1384:	b5 40       	sbci	r27, 0x05	; 5
    1386:	f9 f4       	brne	.+62     	; 0x13c6 <__stack+0x2c7>
								{
									adatbazis[data_fogad[3]-1][3]=5;
    1388:	30 e1       	ldi	r19, 0x10	; 16
    138a:	23 9f       	mul	r18, r19
    138c:	f0 01       	movw	r30, r0
    138e:	11 24       	eor	r1, r1
    1390:	eb 5f       	subi	r30, 0xFB	; 251
    1392:	fc 4f       	sbci	r31, 0xFC	; 252
    1394:	85 e0       	ldi	r24, 0x05	; 5
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	84 87       	std	Z+12, r24	; 0x0c
    139e:	95 87       	std	Z+13, r25	; 0x0d
    13a0:	a6 87       	std	Z+14, r26	; 0x0e
    13a2:	b7 87       	std	Z+15, r27	; 0x0f
									eeprom_iras(5, 3, data_fogad[3]);
    13a4:	43 e0       	ldi	r20, 0x03	; 3
    13a6:	65 e0       	ldi	r22, 0x05	; 5
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
									
									data[0]=6|(1<<7);
    13b2:	86 e8       	ldi	r24, 0x86	; 134
    13b4:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    13b6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <data_fogad+0x3>
    13ba:	8a 83       	std	Y+2, r24	; 0x02
									RS_adatkuldes(data);
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    13c4:	11 c0       	rjmp	.+34     	; 0x13e8 <__stack+0x2e9>
								}
								else
								{
									data[0]=(1<<3)|6|(1<<7);
    13c6:	8e e8       	ldi	r24, 0x8E	; 142
    13c8:	89 83       	std	Y+1, r24	; 0x01
									data[1]=data_fogad[3];
    13ca:	2a 83       	std	Y+2, r18	; 0x02
									RS_adatkuldes(data);
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <__stack+0x2e9>
								break;
					}
				}
				else
				{
					data[0]=(1<<3)|data_fogad[2]|(1<<7);
    13d6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <data_fogad+0x2>
    13da:	88 68       	ori	r24, 0x88	; 136
    13dc:	89 83       	std	Y+1, r24	; 0x01
					data[1]=data_fogad[3];
    13de:	2a 83       	std	Y+2, r18	; 0x02
					RS_adatkuldes(data);
    13e0:	ce 01       	movw	r24, r28
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <RS_adatkuldes>
    13e8:	e4 e0       	ldi	r30, 0x04	; 4
    13ea:	f3 e0       	ldi	r31, 0x03	; 3
    13ec:	8d e0       	ldi	r24, 0x0D	; 13
    13ee:	93 e0       	ldi	r25, 0x03	; 3
				}
				break;
		}
		for (char x=0; x<9; x++)
		{
			data_fogad[x]=0;
    13f0:	11 92       	st	Z+, r1
					data[1]=data_fogad[3];
					RS_adatkuldes(data);
				}
				break;
		}
		for (char x=0; x<9; x++)
    13f2:	e8 17       	cp	r30, r24
    13f4:	f9 07       	cpc	r31, r25
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <__stack+0x2f1>
		{
			data_fogad[x]=0;
		}
	}
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <felhasznalo_nyitas>:
		if (PING==0) gomb_seged=0;
	}
}

void felhasznalo_nyitas(char szekrenyszam)
{
    1436:	cf 93       	push	r28
    1438:	c8 2f       	mov	r28, r24
	adatbazis[szekrenyszam-1][2]=0;
    143a:	80 e1       	ldi	r24, 0x10	; 16
    143c:	c8 9f       	mul	r28, r24
    143e:	f0 01       	movw	r30, r0
    1440:	11 24       	eor	r1, r1
    1442:	eb 5f       	subi	r30, 0xFB	; 251
    1444:	fc 4f       	sbci	r31, 0xFC	; 252
    1446:	10 86       	std	Z+8, r1	; 0x08
    1448:	11 86       	std	Z+9, r1	; 0x09
    144a:	12 86       	std	Z+10, r1	; 0x0a
    144c:	13 86       	std	Z+11, r1	; 0x0b
	eeprom_iras(0, 2, szekrenyszam);
    144e:	2c 2f       	mov	r18, r28
    1450:	42 e0       	ldi	r20, 0x02	; 2
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	cb 01       	movw	r24, r22
    1458:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	
	switch(szekrenyszam)
    145c:	c2 30       	cpi	r28, 0x02	; 2
    145e:	61 f0       	breq	.+24     	; 0x1478 <felhasznalo_nyitas+0x42>
    1460:	18 f4       	brcc	.+6      	; 0x1468 <felhasznalo_nyitas+0x32>
    1462:	c1 30       	cpi	r28, 0x01	; 1
    1464:	31 f0       	breq	.+12     	; 0x1472 <felhasznalo_nyitas+0x3c>
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <felhasznalo_nyitas+0x4c>
    1468:	c3 30       	cpi	r28, 0x03	; 3
    146a:	41 f0       	breq	.+16     	; 0x147c <felhasznalo_nyitas+0x46>
    146c:	c4 30       	cpi	r28, 0x04	; 4
    146e:	41 f0       	breq	.+16     	; 0x1480 <felhasznalo_nyitas+0x4a>
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <felhasznalo_nyitas+0x4c>
	{
		case 1: PORTD|=8<<4; PORTA=0; break;
    1472:	97 9a       	sbi	0x12, 7	; 18
    1474:	1b ba       	out	0x1b, r1	; 27
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <felhasznalo_nyitas+0x4c>
		case 2: PORTD|=4<<4; break;
    1478:	96 9a       	sbi	0x12, 6	; 18
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <felhasznalo_nyitas+0x4c>
		case 3: PORTD|=2<<4; break;
    147c:	95 9a       	sbi	0x12, 5	; 18
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <felhasznalo_nyitas+0x4c>
		case 4: PORTD|=1<<4; break;
    1480:	94 9a       	sbi	0x12, 4	; 18
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1482:	ef e0       	ldi	r30, 0x0F	; 15
    1484:	f3 e0       	ldi	r31, 0x03	; 3
    1486:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    1488:	11 82       	std	Z+1, r1	; 0x01
	ujelozmeny[2]=siker;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	82 83       	std	Z+2, r24	; 0x02
		case 4: PORTD|=1<<4; break;
	}
	
	elozmeny_kuldes(szekrenyszam, 0, 1);
	
	uzenet(11);
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
	uzenet(5);
    1494:	85 e0       	ldi	r24, 0x05	; 5
    1496:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
	while(1)
	{
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    149a:	e3 e6       	ldi	r30, 0x63	; 99
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    14a2:	80 81       	ld	r24, Z
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <felhasznalo_nyitas+0x7c>
    14a8:	91 11       	cpse	r25, r1
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <felhasznalo_nyitas+0x7c>
    14ac:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <felhasznalo_nyitas+0x88>
		if (PING==0) gomb_seged=0;
    14b2:	80 81       	ld	r24, Z
    14b4:	81 11       	cpse	r24, r1
    14b6:	f5 cf       	rjmp	.-22     	; 0x14a2 <felhasznalo_nyitas+0x6c>
    14b8:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    14bc:	f0 cf       	rjmp	.-32     	; 0x149e <felhasznalo_nyitas+0x68>
	}
}
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <felhasznalo_zaras>:

void felhasznalo_zaras(char szekrenyszam)
{
    14c2:	cf 93       	push	r28
    14c4:	c8 2f       	mov	r28, r24
	adatbazis[szekrenyszam-1][2]=1;
    14c6:	80 e1       	ldi	r24, 0x10	; 16
    14c8:	c8 9f       	mul	r28, r24
    14ca:	f0 01       	movw	r30, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	eb 5f       	subi	r30, 0xFB	; 251
    14d0:	fc 4f       	sbci	r31, 0xFC	; 252
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	80 87       	std	Z+8, r24	; 0x08
    14dc:	91 87       	std	Z+9, r25	; 0x09
    14de:	a2 87       	std	Z+10, r26	; 0x0a
    14e0:	b3 87       	std	Z+11, r27	; 0x0b
	eeprom_iras(1, 2, szekrenyszam);
    14e2:	2c 2f       	mov	r18, r28
    14e4:	42 e0       	ldi	r20, 0x02	; 2
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	
	switch(szekrenyszam)
    14f2:	c2 30       	cpi	r28, 0x02	; 2
    14f4:	79 f0       	breq	.+30     	; 0x1514 <felhasznalo_zaras+0x52>
    14f6:	18 f4       	brcc	.+6      	; 0x14fe <felhasznalo_zaras+0x3c>
    14f8:	c1 30       	cpi	r28, 0x01	; 1
    14fa:	31 f0       	breq	.+12     	; 0x1508 <felhasznalo_zaras+0x46>
    14fc:	16 c0       	rjmp	.+44     	; 0x152a <felhasznalo_zaras+0x68>
    14fe:	c3 30       	cpi	r28, 0x03	; 3
    1500:	69 f0       	breq	.+26     	; 0x151c <felhasznalo_zaras+0x5a>
    1502:	c4 30       	cpi	r28, 0x04	; 4
    1504:	79 f0       	breq	.+30     	; 0x1524 <felhasznalo_zaras+0x62>
    1506:	11 c0       	rjmp	.+34     	; 0x152a <felhasznalo_zaras+0x68>
	{
		case 1: PORTD&=7<<4; PORTA=0xFF; break;
    1508:	82 b3       	in	r24, 0x12	; 18
    150a:	80 77       	andi	r24, 0x70	; 112
    150c:	82 bb       	out	0x12, r24	; 18
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	8b bb       	out	0x1b, r24	; 27
    1512:	0b c0       	rjmp	.+22     	; 0x152a <felhasznalo_zaras+0x68>
		case 2: PORTD&=11<<4; break;
    1514:	82 b3       	in	r24, 0x12	; 18
    1516:	80 7b       	andi	r24, 0xB0	; 176
    1518:	82 bb       	out	0x12, r24	; 18
    151a:	07 c0       	rjmp	.+14     	; 0x152a <felhasznalo_zaras+0x68>
		case 3: PORTD&=13<<4; break;
    151c:	82 b3       	in	r24, 0x12	; 18
    151e:	80 7d       	andi	r24, 0xD0	; 208
    1520:	82 bb       	out	0x12, r24	; 18
    1522:	03 c0       	rjmp	.+6      	; 0x152a <felhasznalo_zaras+0x68>
		case 4: PORTD&=14<<4; break;
    1524:	82 b3       	in	r24, 0x12	; 18
    1526:	80 7e       	andi	r24, 0xE0	; 224
    1528:	82 bb       	out	0x12, r24	; 18
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    152a:	ef e0       	ldi	r30, 0x0F	; 15
    152c:	f3 e0       	ldi	r31, 0x03	; 3
    152e:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1534:	82 83       	std	Z+2, r24	; 0x02
		case 4: PORTD&=14<<4; break;
	}
	
	elozmeny_kuldes(szekrenyszam, 1, 1);
	
	uzenet(11);
    1536:	8b e0       	ldi	r24, 0x0B	; 11
    1538:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
	uzenet(6);
    153c:	86 e0       	ldi	r24, 0x06	; 6
    153e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
	while(1)
	{
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1542:	e3 e6       	ldi	r30, 0x63	; 99
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    154a:	80 81       	ld	r24, Z
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	29 f4       	brne	.+10     	; 0x155a <felhasznalo_zaras+0x98>
    1550:	91 11       	cpse	r25, r1
    1552:	03 c0       	rjmp	.+6      	; 0x155a <felhasznalo_zaras+0x98>
    1554:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <felhasznalo_zaras+0xa4>
		if (PING==0) gomb_seged=0;
    155a:	80 81       	ld	r24, Z
    155c:	81 11       	cpse	r24, r1
    155e:	f5 cf       	rjmp	.-22     	; 0x154a <felhasznalo_zaras+0x88>
    1560:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1564:	f0 cf       	rjmp	.-32     	; 0x1546 <felhasznalo_zaras+0x84>
	}
}
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <felhasznalo_kodmodosit>:

void felhasznalo_kodmodosit(char szekrenyszam)
{
    156a:	cf 93       	push	r28
    156c:	c8 2f       	mov	r28, r24
	LCD_goto(0, 0); LCD_Puts("Uj kod:         ");
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1576:	88 ed       	ldi	r24, 0xD8	; 216
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts("                ");
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1586:	8c e0       	ldi	r24, 0x0C	; 12
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1596:	8c e0       	ldi	r24, 0x0C	; 12
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    15a6:	8c e0       	ldi	r24, 0x0C	; 12
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	
	long int uj_kod=0;
	
	uj_kod=szamkeres(0, 8, 6, 0);
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	46 e0       	ldi	r20, 0x06	; 6
    15b2:	68 e0       	ldi	r22, 0x08	; 8
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
	if(uj_kod==-1) return;
    15ba:	6f 3f       	cpi	r22, 0xFF	; 255
    15bc:	2f ef       	ldi	r18, 0xFF	; 255
    15be:	72 07       	cpc	r23, r18
    15c0:	82 07       	cpc	r24, r18
    15c2:	92 07       	cpc	r25, r18
    15c4:	51 f1       	breq	.+84     	; 0x161a <felhasznalo_kodmodosit+0xb0>
	adatbazis[szekrenyszam-1][1]=uj_kod;
    15c6:	20 e1       	ldi	r18, 0x10	; 16
    15c8:	c2 9f       	mul	r28, r18
    15ca:	f0 01       	movw	r30, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	eb 5f       	subi	r30, 0xFB	; 251
    15d0:	fc 4f       	sbci	r31, 0xFC	; 252
    15d2:	64 83       	std	Z+4, r22	; 0x04
    15d4:	75 83       	std	Z+5, r23	; 0x05
    15d6:	86 83       	std	Z+6, r24	; 0x06
    15d8:	97 83       	std	Z+7, r25	; 0x07
	eeprom_iras(uj_kod, 1, szekrenyszam);
    15da:	2c 2f       	mov	r18, r28
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    15e2:	ef e0       	ldi	r30, 0x0F	; 15
    15e4:	f3 e0       	ldi	r31, 0x03	; 3
    15e6:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	82 83       	std	Z+2, r24	; 0x02
	adatbazis[szekrenyszam-1][1]=uj_kod;
	eeprom_iras(uj_kod, 1, szekrenyszam);
	
	elozmeny_kuldes(szekrenyszam, 2, 1);
	
	uzenet(7);
    15f0:	87 e0       	ldi	r24, 0x07	; 7
    15f2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
	while(1)
	{
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    15f6:	e3 e6       	ldi	r30, 0x63	; 99
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    15fe:	80 81       	ld	r24, Z
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	29 f4       	brne	.+10     	; 0x160e <felhasznalo_kodmodosit+0xa4>
    1604:	91 11       	cpse	r25, r1
    1606:	03 c0       	rjmp	.+6      	; 0x160e <felhasznalo_kodmodosit+0xa4>
    1608:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    160c:	06 c0       	rjmp	.+12     	; 0x161a <felhasznalo_kodmodosit+0xb0>
		if (PING==0) gomb_seged=0;
    160e:	80 81       	ld	r24, Z
    1610:	81 11       	cpse	r24, r1
    1612:	f5 cf       	rjmp	.-22     	; 0x15fe <felhasznalo_kodmodosit+0x94>
    1614:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1618:	f0 cf       	rjmp	.-32     	; 0x15fa <felhasznalo_kodmodosit+0x90>
	}
}
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <felhasznalo_fiok>:
		if (PING==0) gomb_seged=0;
	}
}

void felhasznalo_fiok(char szekrenyszam)
{
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	18 2f       	mov	r17, r24
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1626:	ef e0       	ldi	r30, 0x0F	; 15
    1628:	f3 e0       	ldi	r31, 0x03	; 3
    162a:	80 83       	st	Z, r24
	ujelozmeny[1]=muvelet;
    162c:	86 e0       	ldi	r24, 0x06	; 6
    162e:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	82 83       	std	Z+2, r24	; 0x02
		LCD_goto(2, 0); LCD_Puts("G3: Kod modosit ");
		LCD_goto(3, 0); LCD_Puts("G5: Kilepes     ");
		
		if (gomb_seged==0)
		{
			switch(PING)
    1634:	c3 e6       	ldi	r28, 0x63	; 99
    1636:	d0 e0       	ldi	r29, 0x00	; 0
{
	elozmeny_kuldes(szekrenyszam, 6, 1);
	
	while(1)
	{
		LCD_goto(0, 0); LCD_Puts("G1: Nyitas      ");
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1640:	89 ee       	ldi	r24, 0xE9	; 233
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(1, 0); LCD_Puts("G2: Zaras       ");
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1650:	8a ef       	ldi	r24, 0xFA	; 250
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(2, 0); LCD_Puts("G3: Kod modosit ");
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1660:	8b e0       	ldi	r24, 0x0B	; 11
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(3, 0); LCD_Puts("G5: Kilepes     ");
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1670:	8c e1       	ldi	r24, 0x1C	; 28
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		
		if (gomb_seged==0)
    1678:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    167c:	81 11       	cpse	r24, r1
    167e:	28 c0       	rjmp	.+80     	; 0x16d0 <felhasznalo_fiok+0xb2>
		{
			switch(PING)
    1680:	88 81       	ld	r24, Y
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	b1 f0       	breq	.+44     	; 0x16b2 <felhasznalo_fiok+0x94>
    1686:	18 f4       	brcc	.+6      	; 0x168e <felhasznalo_fiok+0x70>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	d1 f0       	breq	.+52     	; 0x16c0 <felhasznalo_fiok+0xa2>
    168c:	21 c0       	rjmp	.+66     	; 0x16d0 <felhasznalo_fiok+0xb2>
    168e:	88 30       	cpi	r24, 0x08	; 8
    1690:	49 f0       	breq	.+18     	; 0x16a4 <felhasznalo_fiok+0x86>
    1692:	80 31       	cpi	r24, 0x10	; 16
    1694:	e9 f4       	brne	.+58     	; 0x16d0 <felhasznalo_fiok+0xb2>
			{
				case 0b10000: gomb_seged=1; felhasznalo_nyitas(szekrenyszam); break;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    169c:	81 2f       	mov	r24, r17
    169e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <felhasznalo_nyitas>
    16a2:	16 c0       	rjmp	.+44     	; 0x16d0 <felhasznalo_fiok+0xb2>
				case 0b01000: gomb_seged=1; felhasznalo_zaras(szekrenyszam); break;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    16aa:	81 2f       	mov	r24, r17
    16ac:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <felhasznalo_zaras>
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <felhasznalo_fiok+0xb2>
				case 0b00100: gomb_seged=1; felhasznalo_kodmodosit(szekrenyszam); break;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    16b8:	81 2f       	mov	r24, r17
    16ba:	0e 94 b5 0a 	call	0x156a	; 0x156a <felhasznalo_kodmodosit>
    16be:	08 c0       	rjmp	.+16     	; 0x16d0 <felhasznalo_fiok+0xb2>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    16c0:	ef e0       	ldi	r30, 0x0F	; 15
    16c2:	f3 e0       	ldi	r31, 0x03	; 3
    16c4:	10 83       	st	Z, r17
	ujelozmeny[1]=muvelet;
    16c6:	87 e0       	ldi	r24, 0x07	; 7
    16c8:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	82 83       	std	Z+2, r24	; 0x02
			switch(PING)
			{
				case 0b10000: gomb_seged=1; felhasznalo_nyitas(szekrenyszam); break;
				case 0b01000: gomb_seged=1; felhasznalo_zaras(szekrenyszam); break;
				case 0b00100: gomb_seged=1; felhasznalo_kodmodosit(szekrenyszam); break;
				case 0b00001: elozmeny_kuldes(szekrenyszam, 7, 1); return;
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <felhasznalo_fiok+0xbe>
			}
		}
		if (PING==0) gomb_seged=0;
    16d0:	88 81       	ld	r24, Y
    16d2:	81 11       	cpse	r24, r1
    16d4:	b1 cf       	rjmp	.-158    	; 0x1638 <felhasznalo_fiok+0x1a>
    16d6:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    16da:	ae cf       	rjmp	.-164    	; 0x1638 <felhasznalo_fiok+0x1a>
	}
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	08 95       	ret

000016e4 <felhasznalo_belepes>:
		if (PING==0) {gomb_seged=0;}
	}
}

void felhasznalo_belepes()
{	
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
	LCD_goto(0, 0); LCD_Puts(">Szekrenyszam:  ");
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    16fe:	8d e2       	ldi	r24, 0x2D	; 45
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts(" Kod:           ");
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    170e:	8e e3       	ldi	r24, 0x3E	; 62
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    171e:	8c e0       	ldi	r24, 0x0C	; 12
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    172e:	8c e0       	ldi	r24, 0x0C	; 12
    1730:	91 e0       	ldi	r25, 0x01	; 1
    1732:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
					return;
				}
			}
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1736:	c3 e6       	ldi	r28, 0x63	; 99
    1738:	d0 e0       	ldi	r29, 0x00	; 0
	signed char szekrenyszam=0;
	char ellenorzes=2;
	
	while (1)
	{
		szekrenyszam=(signed char)szamkeres(0, 15, 1, 0);	//szekrenyszam ellenorzes
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	6f e0       	ldi	r22, 0x0F	; 15
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
    1746:	86 2f       	mov	r24, r22
		if(szekrenyszam==-1) return;
    1748:	6f 3f       	cpi	r22, 0xFF	; 255
    174a:	09 f4       	brne	.+2      	; 0x174e <felhasznalo_belepes+0x6a>
    174c:	f2 c0       	rjmp	.+484    	; 0x1932 <felhasznalo_belepes+0x24e>
		
		ellenorzes=szekrenyszam_ellenorzes(szekrenyszam);
    174e:	b6 2e       	mov	r11, r22
		if(ellenorzes==1) uzenet(0);
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	64 30       	cpi	r22, 0x04	; 4
    1754:	40 f0       	brcs	.+16     	; 0x1766 <felhasznalo_belepes+0x82>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
					return;
				}
			}
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    175c:	88 81       	ld	r24, Y
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	09 f0       	breq	.+2      	; 0x1764 <felhasznalo_belepes+0x80>
    1762:	e1 c0       	rjmp	.+450    	; 0x1926 <felhasznalo_belepes+0x242>
    1764:	d8 c0       	rjmp	.+432    	; 0x1916 <felhasznalo_belepes+0x232>
			{
				LCD_goto(0, 0); LCD_data(' ');
				
				ellenorzes=2;
				
				if(adatbazis[szekrenyszam-1][3]==5)	//felszabadított szekrény kód adás
    1766:	c8 2f       	mov	r28, r24
    1768:	88 0f       	add	r24, r24
    176a:	dd 0b       	sbc	r29, r29
    176c:	7e 01       	movw	r14, r28
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	e2 1a       	sub	r14, r18
    1772:	f1 08       	sbc	r15, r1
    1774:	c7 01       	movw	r24, r14
    1776:	82 95       	swap	r24
    1778:	92 95       	swap	r25
    177a:	90 7f       	andi	r25, 0xF0	; 240
    177c:	98 27       	eor	r25, r24
    177e:	80 7f       	andi	r24, 0xF0	; 240
    1780:	98 27       	eor	r25, r24
    1782:	8c 01       	movw	r16, r24
    1784:	0f 5d       	subi	r16, 0xDF	; 223
    1786:	1c 4f       	sbci	r17, 0xFC	; 252
				LCD_goto(1, 0); LCD_Puts(">Kod:           ");
				
				while((adatbazis[szekrenyszam-1][3]==3)||(adatbazis[szekrenyszam-1][3]==4))	//túl sok próbálkozás vagy admin zár
				{
					uzenet(2);
					if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1788:	c3 e6       	ldi	r28, 0x63	; 99
    178a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			long int kod=0;
			
			while (1)
			{
				LCD_goto(0, 0); LCD_data(' ');
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1794:	80 e2       	ldi	r24, 0x20	; 32
    1796:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_data>
				
				ellenorzes=2;
				
				if(adatbazis[szekrenyszam-1][3]==5)	//felszabadított szekrény kód adás
    179a:	67 01       	movw	r12, r14
    179c:	f8 01       	movw	r30, r16
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	a2 81       	ldd	r26, Z+2	; 0x02
    17a4:	b3 81       	ldd	r27, Z+3	; 0x03
    17a6:	05 97       	sbiw	r24, 0x05	; 5
    17a8:	a1 05       	cpc	r26, r1
    17aa:	b1 05       	cpc	r27, r1
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <felhasznalo_belepes+0xcc>
    17ae:	46 c0       	rjmp	.+140    	; 0x183c <felhasznalo_belepes+0x158>
				{
					LCD_goto(1, 0); LCD_Puts(">Uj kod:        ");
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    17b8:	8f e4       	ldi	r24, 0x4F	; 79
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
					kod=szamkeres(1, 9, 6, 0);
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	46 e0       	ldi	r20, 0x06	; 6
    17c4:	69 e0       	ldi	r22, 0x09	; 9
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
					if(kod==-1) return;
    17cc:	6f 3f       	cpi	r22, 0xFF	; 255
    17ce:	ff ef       	ldi	r31, 0xFF	; 255
    17d0:	7f 07       	cpc	r23, r31
    17d2:	8f 07       	cpc	r24, r31
    17d4:	9f 07       	cpc	r25, r31
    17d6:	09 f4       	brne	.+2      	; 0x17da <felhasznalo_belepes+0xf6>
    17d8:	ac c0       	rjmp	.+344    	; 0x1932 <felhasznalo_belepes+0x24e>
					adatbazis[szekrenyszam-1][1]=kod;
    17da:	e7 01       	movw	r28, r14
    17dc:	c2 95       	swap	r28
    17de:	d2 95       	swap	r29
    17e0:	d0 7f       	andi	r29, 0xF0	; 240
    17e2:	dc 27       	eor	r29, r28
    17e4:	c0 7f       	andi	r28, 0xF0	; 240
    17e6:	dc 27       	eor	r29, r28
    17e8:	cb 5e       	subi	r28, 0xEB	; 235
    17ea:	dc 4f       	sbci	r29, 0xFC	; 252
    17ec:	6c 83       	std	Y+4, r22	; 0x04
    17ee:	7d 83       	std	Y+5, r23	; 0x05
    17f0:	8e 83       	std	Y+6, r24	; 0x06
    17f2:	9f 83       	std	Y+7, r25	; 0x07
					eeprom_iras(kod, 1, szekrenyszam);
    17f4:	2b 2d       	mov	r18, r11
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
					adatbazis[szekrenyszam-1][3]=0;
    17fc:	1c 86       	std	Y+12, r1	; 0x0c
    17fe:	1d 86       	std	Y+13, r1	; 0x0d
    1800:	1e 86       	std	Y+14, r1	; 0x0e
    1802:	1f 86       	std	Y+15, r1	; 0x0f
					eeprom_iras(0, 3, szekrenyszam);
    1804:	2b 2d       	mov	r18, r11
    1806:	43 e0       	ldi	r20, 0x03	; 3
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	cb 01       	movw	r24, r22
    180e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
					uzenet(1);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
					while(1)
					{
						if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1818:	e3 e6       	ldi	r30, 0x63	; 99
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    1820:	80 81       	ld	r24, Z
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	29 f4       	brne	.+10     	; 0x1830 <felhasznalo_belepes+0x14c>
    1826:	91 11       	cpse	r25, r1
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <felhasznalo_belepes+0x14c>
    182a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    182e:	81 c0       	rjmp	.+258    	; 0x1932 <felhasznalo_belepes+0x24e>
						if (PING==0) gomb_seged=0;
    1830:	80 81       	ld	r24, Z
    1832:	81 11       	cpse	r24, r1
    1834:	f5 cf       	rjmp	.-22     	; 0x1820 <felhasznalo_belepes+0x13c>
    1836:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    183a:	f0 cf       	rjmp	.-32     	; 0x181c <felhasznalo_belepes+0x138>
					}
				}
				
				LCD_goto(1, 0); LCD_Puts(">Kod:           ");
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1844:	80 e6       	ldi	r24, 0x60	; 96
    1846:	92 e0       	ldi	r25, 0x02	; 2
    1848:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
				
				while((adatbazis[szekrenyszam-1][3]==3)||(adatbazis[szekrenyszam-1][3]==4))	//túl sok próbálkozás vagy admin zár
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <felhasznalo_belepes+0x190>
				{
					uzenet(2);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
					if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1854:	88 81       	ld	r24, Y
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	41 f4       	brne	.+16     	; 0x186a <felhasznalo_belepes+0x186>
    185a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    185e:	81 11       	cpse	r24, r1
    1860:	04 c0       	rjmp	.+8      	; 0x186a <felhasznalo_belepes+0x186>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1868:	64 c0       	rjmp	.+200    	; 0x1932 <felhasznalo_belepes+0x24e>
					if (PING==0) gomb_seged=0;
    186a:	88 81       	ld	r24, Y
    186c:	81 11       	cpse	r24, r1
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <felhasznalo_belepes+0x190>
    1870:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
					}
				}
				
				LCD_goto(1, 0); LCD_Puts(">Kod:           ");
				
				while((adatbazis[szekrenyszam-1][3]==3)||(adatbazis[szekrenyszam-1][3]==4))	//túl sok próbálkozás vagy admin zár
    1874:	f8 01       	movw	r30, r16
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	a2 81       	ldd	r26, Z+2	; 0x02
    187c:	b3 81       	ldd	r27, Z+3	; 0x03
    187e:	03 97       	sbiw	r24, 0x03	; 3
    1880:	a1 09       	sbc	r26, r1
    1882:	b1 09       	sbc	r27, r1
    1884:	02 97       	sbiw	r24, 0x02	; 2
    1886:	a1 05       	cpc	r26, r1
    1888:	b1 05       	cpc	r27, r1
    188a:	08 f3       	brcs	.-62     	; 0x184e <felhasznalo_belepes+0x16a>
					uzenet(2);
					if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
					if (PING==0) gomb_seged=0;
				}
				
				kod=szamkeres(1, 6, 6, 1);	//kód ellenõrzés
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	46 e0       	ldi	r20, 0x06	; 6
    1890:	66 e0       	ldi	r22, 0x06	; 6
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
    1898:	ab 01       	movw	r20, r22
    189a:	bc 01       	movw	r22, r24
				if(kod==-1) return;
    189c:	4f 3f       	cpi	r20, 0xFF	; 255
    189e:	ff ef       	ldi	r31, 0xFF	; 255
    18a0:	5f 07       	cpc	r21, r31
    18a2:	6f 07       	cpc	r22, r31
    18a4:	7f 07       	cpc	r23, r31
    18a6:	09 f4       	brne	.+2      	; 0x18aa <felhasznalo_belepes+0x1c6>
    18a8:	44 c0       	rjmp	.+136    	; 0x1932 <felhasznalo_belepes+0x24e>
				ellenorzes=kod_ellenorzes(szekrenyszam, kod);
    18aa:	8b 2d       	mov	r24, r11
    18ac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <kod_ellenorzes>
				if(ellenorzes==1)
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	b9 f4       	brne	.+46     	; 0x18e2 <felhasznalo_belepes+0x1fe>
				{
					uzenet(4);
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
					kod=0;
					adatbazis[szekrenyszam-1][3]++;
    18ba:	f8 01       	movw	r30, r16
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	a2 81       	ldd	r26, Z+2	; 0x02
    18c2:	b3 81       	ldd	r27, Z+3	; 0x03
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	6f 5f       	subi	r22, 0xFF	; 255
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	60 83       	st	Z, r22
    18d2:	71 83       	std	Z+1, r23	; 0x01
    18d4:	82 83       	std	Z+2, r24	; 0x02
    18d6:	93 83       	std	Z+3, r25	; 0x03
					eeprom_iras(adatbazis[szekrenyszam-1][3], 3, szekrenyszam);
    18d8:	2b 2d       	mov	r18, r11
    18da:	43 e0       	ldi	r20, 0x03	; 3
    18dc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
    18e0:	55 cf       	rjmp	.-342    	; 0x178c <felhasznalo_belepes+0xa8>
				}
				if(ellenorzes==0)
    18e2:	81 11       	cpse	r24, r1
    18e4:	53 cf       	rjmp	.-346    	; 0x178c <felhasznalo_belepes+0xa8>
				{
					adatbazis[szekrenyszam-1][3]=0;
    18e6:	f6 01       	movw	r30, r12
    18e8:	e2 95       	swap	r30
    18ea:	f2 95       	swap	r31
    18ec:	f0 7f       	andi	r31, 0xF0	; 240
    18ee:	fe 27       	eor	r31, r30
    18f0:	e0 7f       	andi	r30, 0xF0	; 240
    18f2:	fe 27       	eor	r31, r30
    18f4:	eb 5e       	subi	r30, 0xEB	; 235
    18f6:	fc 4f       	sbci	r31, 0xFC	; 252
    18f8:	14 86       	std	Z+12, r1	; 0x0c
    18fa:	15 86       	std	Z+13, r1	; 0x0d
    18fc:	16 86       	std	Z+14, r1	; 0x0e
    18fe:	17 86       	std	Z+15, r1	; 0x0f
					eeprom_iras(0, 3, szekrenyszam);
    1900:	2b 2d       	mov	r18, r11
    1902:	43 e0       	ldi	r20, 0x03	; 3
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	cb 01       	movw	r24, r22
    190a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
					
					felhasznalo_fiok(szekrenyszam);
    190e:	8b 2d       	mov	r24, r11
    1910:	0e 94 0f 0b 	call	0x161e	; 0x161e <felhasznalo_fiok>
					return;
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <felhasznalo_belepes+0x24e>
				}
			}
		}
		
		if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1916:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    191a:	81 11       	cpse	r24, r1
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <felhasznalo_belepes+0x242>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <felhasznalo_belepes+0x24e>
		if (PING==0) gomb_seged=0;
    1926:	88 81       	ld	r24, Y
    1928:	81 11       	cpse	r24, r1
    192a:	07 cf       	rjmp	.-498    	; 0x173a <felhasznalo_belepes+0x56>
    192c:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1930:	04 cf       	rjmp	.-504    	; 0x173a <felhasznalo_belepes+0x56>
	}
}
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	08 95       	ret

00001946 <admin_zarolas>:
		if (PING==0) gomb_seged=0;
	}
}

void admin_zarolas()
{
    1946:	cf 93       	push	r28
	LCD_goto(0, 0); LCD_Puts("Szekrenyszam:   ");
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1950:	81 e7       	ldi	r24, 0x71	; 113
    1952:	92 e0       	ldi	r25, 0x02	; 2
    1954:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts("                ");
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1960:	8c e0       	ldi	r24, 0x0C	; 12
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1970:	8c e0       	ldi	r24, 0x0C	; 12
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1980:	8c e0       	ldi	r24, 0x0C	; 12
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	signed char szekrenyszam=0;
	char ellenorzes=2;
	
	while(1)
	{
		szekrenyszam=(signed char)szamkeres(0, 14, 1, 0);
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	6e e0       	ldi	r22, 0x0E	; 14
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
    1994:	e6 2f       	mov	r30, r22
		if (szekrenyszam==-1) return;
    1996:	6f 3f       	cpi	r22, 0xFF	; 255
    1998:	d1 f1       	breq	.+116    	; 0x1a0e <admin_zarolas+0xc8>
			
		ellenorzes=szekrenyszam_ellenorzes(szekrenyszam);
    199a:	c6 2f       	mov	r28, r22
		if(ellenorzes==1) uzenet(0);
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	64 30       	cpi	r22, 0x04	; 4
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <admin_zarolas+0x64>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
    19a8:	ef cf       	rjmp	.-34     	; 0x1988 <admin_zarolas+0x42>
		if(ellenorzes==0)
		{
			adatbazis[szekrenyszam-1][3]=4;
    19aa:	80 e1       	ldi	r24, 0x10	; 16
    19ac:	e8 02       	muls	r30, r24
    19ae:	f0 01       	movw	r30, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	eb 5f       	subi	r30, 0xFB	; 251
    19b4:	fc 4f       	sbci	r31, 0xFC	; 252
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	84 87       	std	Z+12, r24	; 0x0c
    19c0:	95 87       	std	Z+13, r25	; 0x0d
    19c2:	a6 87       	std	Z+14, r26	; 0x0e
    19c4:	b7 87       	std	Z+15, r27	; 0x0f
			eeprom_iras(4, 3, szekrenyszam);
    19c6:	2c 2f       	mov	r18, r28
    19c8:	43 e0       	ldi	r20, 0x03	; 3
    19ca:	64 e0       	ldi	r22, 0x04	; 4
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    19d6:	ef e0       	ldi	r30, 0x0F	; 15
    19d8:	f3 e0       	ldi	r31, 0x03	; 3
    19da:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	82 83       	std	Z+2, r24	; 0x02
			adatbazis[szekrenyszam-1][3]=4;
			eeprom_iras(4, 3, szekrenyszam);
			
			elozmeny_kuldes(szekrenyszam, 3, 1);
			
			uzenet(8);
    19e4:	88 e0       	ldi	r24, 0x08	; 8
    19e6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
			while(1)
			{
				if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    19ea:	e3 e6       	ldi	r30, 0x63	; 99
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    19f2:	80 81       	ld	r24, Z
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <admin_zarolas+0xbc>
    19f8:	91 11       	cpse	r25, r1
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <admin_zarolas+0xbc>
    19fc:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <admin_zarolas+0xc8>
				if (PING==0) gomb_seged=0;
    1a02:	80 81       	ld	r24, Z
    1a04:	81 11       	cpse	r24, r1
    1a06:	f5 cf       	rjmp	.-22     	; 0x19f2 <admin_zarolas+0xac>
    1a08:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1a0c:	f0 cf       	rjmp	.-32     	; 0x19ee <admin_zarolas+0xa8>
			}
		}
	}
}
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <admin_zarolasfeloldas>:

void admin_zarolasfeloldas()
{
    1a12:	cf 93       	push	r28
	LCD_goto(0, 0); LCD_Puts("Szekrenyszam:   ");
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1a1c:	81 e7       	ldi	r24, 0x71	; 113
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts("                ");
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1a2c:	8c e0       	ldi	r24, 0x0C	; 12
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1a3c:	8c e0       	ldi	r24, 0x0C	; 12
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1a4c:	8c e0       	ldi	r24, 0x0C	; 12
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	signed char szekrenyszam=0;
	char ellenorzes=2;
	
	while(1)
	{
		szekrenyszam=(signed char)szamkeres(0, 14, 1, 0);
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	6e e0       	ldi	r22, 0x0E	; 14
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
    1a60:	e6 2f       	mov	r30, r22
		if (szekrenyszam==-1) return;
    1a62:	6f 3f       	cpi	r22, 0xFF	; 255
    1a64:	a9 f1       	breq	.+106    	; 0x1ad0 <admin_zarolasfeloldas+0xbe>
		
		ellenorzes=szekrenyszam_ellenorzes(szekrenyszam);
    1a66:	c6 2f       	mov	r28, r22
		if(ellenorzes==1) uzenet(0);
    1a68:	61 50       	subi	r22, 0x01	; 1
    1a6a:	64 30       	cpi	r22, 0x04	; 4
    1a6c:	20 f0       	brcs	.+8      	; 0x1a76 <admin_zarolasfeloldas+0x64>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
    1a74:	ef cf       	rjmp	.-34     	; 0x1a54 <admin_zarolasfeloldas+0x42>
		if(ellenorzes==0)
		{
			adatbazis[szekrenyszam-1][3]=0;
    1a76:	80 e1       	ldi	r24, 0x10	; 16
    1a78:	e8 02       	muls	r30, r24
    1a7a:	f0 01       	movw	r30, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	eb 5f       	subi	r30, 0xFB	; 251
    1a80:	fc 4f       	sbci	r31, 0xFC	; 252
    1a82:	14 86       	std	Z+12, r1	; 0x0c
    1a84:	15 86       	std	Z+13, r1	; 0x0d
    1a86:	16 86       	std	Z+14, r1	; 0x0e
    1a88:	17 86       	std	Z+15, r1	; 0x0f
			eeprom_iras(0, 3, szekrenyszam);
    1a8a:	2c 2f       	mov	r18, r28
    1a8c:	43 e0       	ldi	r20, 0x03	; 3
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	cb 01       	movw	r24, r22
    1a94:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1a98:	ef e0       	ldi	r30, 0x0F	; 15
    1a9a:	f3 e0       	ldi	r31, 0x03	; 3
    1a9c:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	82 83       	std	Z+2, r24	; 0x02
			adatbazis[szekrenyszam-1][3]=0;
			eeprom_iras(0, 3, szekrenyszam);
			
			elozmeny_kuldes(szekrenyszam, 4, 1);
			
			uzenet(9);
    1aa6:	89 e0       	ldi	r24, 0x09	; 9
    1aa8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
			while(1)
			{
				if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1aac:	e3 e6       	ldi	r30, 0x63	; 99
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <admin_zarolasfeloldas+0xb2>
    1aba:	91 11       	cpse	r25, r1
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <admin_zarolasfeloldas+0xb2>
    1abe:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <admin_zarolasfeloldas+0xbe>
				if (PING==0) gomb_seged=0;
    1ac4:	80 81       	ld	r24, Z
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	f5 cf       	rjmp	.-22     	; 0x1ab4 <admin_zarolasfeloldas+0xa2>
    1aca:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1ace:	f0 cf       	rjmp	.-32     	; 0x1ab0 <admin_zarolasfeloldas+0x9e>
			}
		}
	}
}
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <admin_felszabaditas>:

void admin_felszabaditas()
{
    1ad4:	cf 93       	push	r28
	LCD_goto(0, 0); LCD_Puts("Szekrenyszam:   ");
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1ade:	81 e7       	ldi	r24, 0x71	; 113
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts("                ");
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1aee:	8c e0       	ldi	r24, 0x0C	; 12
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1b0e:	8c e0       	ldi	r24, 0x0C	; 12
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	signed char szekrenyszam=0;
	char ellenorzes=2;
	
	while(1)
	{
		szekrenyszam=(signed char)szamkeres(0, 14, 1, 0);
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	6e e0       	ldi	r22, 0x0E	; 14
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
    1b22:	e6 2f       	mov	r30, r22
		if (szekrenyszam==-1) return;
    1b24:	6f 3f       	cpi	r22, 0xFF	; 255
    1b26:	d1 f1       	breq	.+116    	; 0x1b9c <admin_felszabaditas+0xc8>
		
		ellenorzes=szekrenyszam_ellenorzes(szekrenyszam);
    1b28:	c6 2f       	mov	r28, r22
		if(ellenorzes==1) uzenet(0);
    1b2a:	61 50       	subi	r22, 0x01	; 1
    1b2c:	64 30       	cpi	r22, 0x04	; 4
    1b2e:	20 f0       	brcs	.+8      	; 0x1b38 <admin_felszabaditas+0x64>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
    1b36:	ef cf       	rjmp	.-34     	; 0x1b16 <admin_felszabaditas+0x42>
		if(ellenorzes==0)
		{
			adatbazis[szekrenyszam-1][3]=5;
    1b38:	80 e1       	ldi	r24, 0x10	; 16
    1b3a:	e8 02       	muls	r30, r24
    1b3c:	f0 01       	movw	r30, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	eb 5f       	subi	r30, 0xFB	; 251
    1b42:	fc 4f       	sbci	r31, 0xFC	; 252
    1b44:	85 e0       	ldi	r24, 0x05	; 5
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	84 87       	std	Z+12, r24	; 0x0c
    1b4e:	95 87       	std	Z+13, r25	; 0x0d
    1b50:	a6 87       	std	Z+14, r26	; 0x0e
    1b52:	b7 87       	std	Z+15, r27	; 0x0f
			eeprom_iras(5, 3, szekrenyszam);
    1b54:	2c 2f       	mov	r18, r28
    1b56:	43 e0       	ldi	r20, 0x03	; 3
    1b58:	65 e0       	ldi	r22, 0x05	; 5
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <eeprom_iras>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1b64:	ef e0       	ldi	r30, 0x0F	; 15
    1b66:	f3 e0       	ldi	r31, 0x03	; 3
    1b68:	c0 83       	st	Z, r28
	ujelozmeny[1]=muvelet;
    1b6a:	85 e0       	ldi	r24, 0x05	; 5
    1b6c:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	82 83       	std	Z+2, r24	; 0x02
			adatbazis[szekrenyszam-1][3]=5;
			eeprom_iras(5, 3, szekrenyszam);
			
			elozmeny_kuldes(szekrenyszam, 5, 1);
			
			uzenet(10);
    1b72:	8a e0       	ldi	r24, 0x0A	; 10
    1b74:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
			while(1)
			{
				if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1b78:	e3 e6       	ldi	r30, 0x63	; 99
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <gomb_seged>
    1b80:	80 81       	ld	r24, Z
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <admin_felszabaditas+0xbc>
    1b86:	91 11       	cpse	r25, r1
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <admin_felszabaditas+0xbc>
    1b8a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <admin_felszabaditas+0xc8>
				if (PING==0) gomb_seged=0;
    1b90:	80 81       	ld	r24, Z
    1b92:	81 11       	cpse	r24, r1
    1b94:	f5 cf       	rjmp	.-22     	; 0x1b80 <admin_felszabaditas+0xac>
    1b96:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1b9a:	f0 cf       	rjmp	.-32     	; 0x1b7c <admin_felszabaditas+0xa8>
			}
		}
	}
}
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <admin_fiok>:
		}
	}
}

void admin_fiok()
{
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1ba4:	ef e0       	ldi	r30, 0x0F	; 15
    1ba6:	f3 e0       	ldi	r31, 0x03	; 3
    1ba8:	10 82       	st	Z, r1
	ujelozmeny[1]=muvelet;
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	82 83       	std	Z+2, r24	; 0x02
		LCD_goto(2, 0); LCD_Puts("G3: Felszabadit ");
		LCD_goto(3, 0); LCD_Puts("G5: Kilepes     ");
		
		if (gomb_seged==0)
		{
			switch(PING)
    1bb2:	c3 e6       	ldi	r28, 0x63	; 99
    1bb4:	d0 e0       	ldi	r29, 0x00	; 0
{
	elozmeny_kuldes(0, 6, 1);
	
	while(1)
	{
		LCD_goto(0, 0); LCD_Puts("G1: Zarolas     ");
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1bbe:	82 e8       	ldi	r24, 0x82	; 130
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(1, 0); LCD_Puts("G2: Feloldas    ");
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1bce:	83 e9       	ldi	r24, 0x93	; 147
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(2, 0); LCD_Puts("G3: Felszabadit ");
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1bde:	84 ea       	ldi	r24, 0xA4	; 164
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(3, 0); LCD_Puts("G5: Kilepes     ");
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1bee:	8c e1       	ldi	r24, 0x1C	; 28
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		
		if (gomb_seged==0)
    1bf6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	25 c0       	rjmp	.+74     	; 0x1c48 <admin_fiok+0xa8>
		{
			switch(PING)
    1bfe:	88 81       	ld	r24, Y
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	a1 f0       	breq	.+40     	; 0x1c2c <admin_fiok+0x8c>
    1c04:	18 f4       	brcc	.+6      	; 0x1c0c <admin_fiok+0x6c>
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	b9 f0       	breq	.+46     	; 0x1c38 <admin_fiok+0x98>
    1c0a:	1e c0       	rjmp	.+60     	; 0x1c48 <admin_fiok+0xa8>
    1c0c:	88 30       	cpi	r24, 0x08	; 8
    1c0e:	41 f0       	breq	.+16     	; 0x1c20 <admin_fiok+0x80>
    1c10:	80 31       	cpi	r24, 0x10	; 16
    1c12:	d1 f4       	brne	.+52     	; 0x1c48 <admin_fiok+0xa8>
			{
				case 0b10000: gomb_seged=1; admin_zarolas(); break;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1c1a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <admin_zarolas>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <admin_fiok+0xa8>
				case 0b01000: gomb_seged=1; admin_zarolasfeloldas(); break;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1c26:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <admin_zarolasfeloldas>
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <admin_fiok+0xa8>
				case 0b00100: gomb_seged=1; admin_felszabaditas(); break;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1c32:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <admin_felszabaditas>
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <admin_fiok+0xa8>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1c38:	ef e0       	ldi	r30, 0x0F	; 15
    1c3a:	f3 e0       	ldi	r31, 0x03	; 3
    1c3c:	10 82       	st	Z, r1
	ujelozmeny[1]=muvelet;
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	81 83       	std	Z+1, r24	; 0x01
	ujelozmeny[2]=siker;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	82 83       	std	Z+2, r24	; 0x02
			switch(PING)
			{
				case 0b10000: gomb_seged=1; admin_zarolas(); break;
				case 0b01000: gomb_seged=1; admin_zarolasfeloldas(); break;
				case 0b00100: gomb_seged=1; admin_felszabaditas(); break;
				case 0b00001: elozmeny_kuldes(0, 7, 1); return;
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <admin_fiok+0xb4>
			}
		}
		if (PING==0) gomb_seged=0;
    1c48:	88 81       	ld	r24, Y
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	b4 cf       	rjmp	.-152    	; 0x1bb6 <admin_fiok+0x16>
    1c4e:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1c52:	b1 cf       	rjmp	.-158    	; 0x1bb6 <admin_fiok+0x16>
	}
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <admin_belepes>:
		if (PING==0) gomb_seged=0;
	}
}

void admin_belepes()
{
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
	LCD_goto(0, 0); LCD_Puts("Kod:            ");
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1c6c:	85 eb       	ldi	r24, 0xB5	; 181
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(1, 0); LCD_Puts("                ");
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1c7c:	8c e0       	ldi	r24, 0x0C	; 12
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(2, 0); LCD_Puts("                ");
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1c8c:	8c e0       	ldi	r24, 0x0C	; 12
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	LCD_goto(3, 0); LCD_Puts("                ");
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1c9c:	8c e0       	ldi	r24, 0x0C	; 12
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1ca4:	cf e0       	ldi	r28, 0x0F	; 15
    1ca6:	d3 e0       	ldi	r29, 0x03	; 3
	ujelozmeny[1]=muvelet;
    1ca8:	0f 2e       	mov	r0, r31
    1caa:	f6 e0       	ldi	r31, 0x06	; 6
    1cac:	ff 2e       	mov	r15, r31
    1cae:	f0 2d       	mov	r31, r0
	while(1)
	{
		while(admin_zar==3)
		{
			uzenet(3);
			if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1cb0:	03 e6       	ldi	r16, 0x63	; 99
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	15 c0       	rjmp	.+42     	; 0x1ce0 <admin_belepes+0x86>
	
	while(1)
	{
		while(admin_zar==3)
		{
			uzenet(3);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
			if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 81       	ld	r24, Z
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	41 f4       	brne	.+16     	; 0x1cd4 <admin_belepes+0x7a>
    1cc4:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    1cc8:	81 11       	cpse	r24, r1
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <admin_belepes+0x7a>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1cd2:	2c c0       	rjmp	.+88     	; 0x1d2c <admin_belepes+0xd2>
			if (PING==0) gomb_seged=0;
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 11       	cpse	r24, r1
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <admin_belepes+0x86>
    1cdc:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
	
	long int kod=0;
	
	while(1)
	{
		while(admin_zar==3)
    1ce0:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <admin_zar>
    1ce4:	83 30       	cpi	r24, 0x03	; 3
    1ce6:	39 f3       	breq	.-50     	; 0x1cb6 <admin_belepes+0x5c>
			uzenet(3);
			if ((PING==0b00001)&&(gomb_seged==0)) {gomb_seged=1; return;}
			if (PING==0) gomb_seged=0;
		}
		
		kod=szamkeres(0, 5, 8, 1);
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	48 e0       	ldi	r20, 0x08	; 8
    1cec:	65 e0       	ldi	r22, 0x05	; 5
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	0e 94 10 03 	call	0x620	; 0x620 <szamkeres>
		
		if (kod==-1) return;
    1cf4:	6f 3f       	cpi	r22, 0xFF	; 255
    1cf6:	ff ef       	ldi	r31, 0xFF	; 255
    1cf8:	7f 07       	cpc	r23, r31
    1cfa:	8f 07       	cpc	r24, r31
    1cfc:	9f 07       	cpc	r25, r31
    1cfe:	b1 f0       	breq	.+44     	; 0x1d2c <admin_belepes+0xd2>
		
		if (kod==admin_kod)
    1d00:	6f 3f       	cpi	r22, 0xFF	; 255
    1d02:	70 4e       	sbci	r23, 0xE0	; 224
    1d04:	85 4f       	sbci	r24, 0xF5	; 245
    1d06:	95 40       	sbci	r25, 0x05	; 5
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <admin_belepes+0xba>
		{
			admin_zar=0;
    1d0a:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <admin_zar>
			admin_fiok();
    1d0e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <admin_fiok>
			return;
    1d12:	0c c0       	rjmp	.+24     	; 0x1d2c <admin_belepes+0xd2>
	return 1;
}

void elozmeny_kuldes(char szekrenyszam, char muvelet, char siker)
{
	ujelozmeny[0]=szekrenyszam;
    1d14:	18 82       	st	Y, r1
	ujelozmeny[1]=muvelet;
    1d16:	f9 82       	std	Y+1, r15	; 0x01
	ujelozmeny[2]=siker;
    1d18:	1a 82       	std	Y+2, r1	; 0x02
			return;
		}
		else
		{
			elozmeny_kuldes(0, 6, 0);
			uzenet(0);
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uzenet>
			admin_zar++;
    1d20:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <admin_zar>
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <admin_zar>
		}
	}
    1d2a:	da cf       	rjmp	.-76     	; 0x1ce0 <admin_belepes+0x86>
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	08 95       	ret

00001d38 <menu>:
		LCD_goto(0, 0); LCD_Puts("Belepes         ");
		LCD_goto(1, 0); LCD_Puts("                ");
		LCD_goto(2, 0); LCD_Puts("G1: Felhasznalo ");
		LCD_goto(3, 0); LCD_Puts("G2: Admin       ");
		
		if ((PING==0b10000)&&(gomb_seged==0)) {gomb_seged=1; felhasznalo_belepes();}
    1d38:	c3 e6       	ldi	r28, 0x63	; 99
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0

void menu()
{
	while(1)
	{
		LCD_goto(0, 0); LCD_Puts("Belepes         ");
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1d44:	86 ec       	ldi	r24, 0xC6	; 198
    1d46:	92 e0       	ldi	r25, 0x02	; 2
    1d48:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(1, 0); LCD_Puts("                ");
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1d54:	8c e0       	ldi	r24, 0x0C	; 12
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(2, 0); LCD_Puts("G1: Felhasznalo ");
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1d64:	87 ed       	ldi	r24, 0xD7	; 215
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		LCD_goto(3, 0); LCD_Puts("G2: Admin       ");
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	0e 94 04 02 	call	0x408	; 0x408 <LCD_goto>
    1d74:	88 ee       	ldi	r24, 0xE8	; 232
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_Puts>
		
		if ((PING==0b10000)&&(gomb_seged==0)) {gomb_seged=1; felhasznalo_belepes();}
    1d7c:	88 81       	ld	r24, Y
    1d7e:	80 31       	cpi	r24, 0x10	; 16
    1d80:	49 f4       	brne	.+18     	; 0x1d94 <menu+0x5c>
    1d82:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    1d86:	81 11       	cpse	r24, r1
    1d88:	17 c0       	rjmp	.+46     	; 0x1db8 <menu+0x80>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1d90:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <felhasznalo_belepes>
		if ((PING==0b01000)&&(gomb_seged==0)) {gomb_seged=1; admin_belepes();}
    1d94:	88 81       	ld	r24, Y
    1d96:	88 30       	cpi	r24, 0x08	; 8
    1d98:	49 f4       	brne	.+18     	; 0x1dac <menu+0x74>
    1d9a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <gomb_seged>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <menu+0x74>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <gomb_seged>
    1da8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <admin_belepes>
		if (PING==0) {gomb_seged=0;}
    1dac:	88 81       	ld	r24, Y
    1dae:	81 11       	cpse	r24, r1
    1db0:	c5 cf       	rjmp	.-118    	; 0x1d3c <menu+0x4>
    1db2:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <gomb_seged>
    1db6:	c2 cf       	rjmp	.-124    	; 0x1d3c <menu+0x4>
		LCD_goto(1, 0); LCD_Puts("                ");
		LCD_goto(2, 0); LCD_Puts("G1: Felhasznalo ");
		LCD_goto(3, 0); LCD_Puts("G2: Admin       ");
		
		if ((PING==0b10000)&&(gomb_seged==0)) {gomb_seged=1; felhasznalo_belepes();}
		if ((PING==0b01000)&&(gomb_seged==0)) {gomb_seged=1; admin_belepes();}
    1db8:	88 81       	ld	r24, Y
    1dba:	f8 cf       	rjmp	.-16     	; 0x1dac <menu+0x74>

00001dbc <main>:
char data_fogad[9]={0};
void kijelzes(char asd);

int main()
{
	adatbazis_init();
    1dbc:	0e 94 21 02 	call	0x442	; 0x442 <adatbazis_init>
	init();
    1dc0:	0e 94 b7 02 	call	0x56e	; 0x56e <init>
	
	while(1)
	{
		menu();	
    1dc4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <menu>

00001dc8 <RS_init>:
uint8_t seged=0;
uint8_t bejovo=0;

void RS_init() 
{
	DDRD |= 0b00001000;
    1dc8:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &= 0b11111011;		//PD2 külsõ UART interrupt receive, PD3 külsõ UART interrupt transmit
    1dca:	8a 98       	cbi	0x11, 2	; 17
	
	DDRC &= ~(1<<7);
    1dcc:	a7 98       	cbi	0x14, 7	; 20
	DDRE &= ~(1<<2);
    1dce:	12 98       	cbi	0x02, 2	; 2
	DDRC |= (1<<7);
    1dd0:	a7 9a       	sbi	0x14, 7	; 20
	DDRE |= (1<<2);			//USART0 külsõ órajel
    1dd2:	12 9a       	sbi	0x02, 2	; 2
    1dd4:	08 95       	ret

00001dd6 <__vector_30>:
}

ISR(USART1_RX_vect)
{	
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	8f 93       	push	r24
    1de2:	9f 93       	push	r25
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
	TIMSK&=0b11111101;
    1de8:	87 b7       	in	r24, 0x37	; 55
    1dea:	8d 7f       	andi	r24, 0xFD	; 253
    1dec:	87 bf       	out	0x37, r24	; 55
	
	bejovo=UDR1;
    1dee:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
    1df2:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <bejovo>

	if (seged==0)
    1df6:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <seged>
    1dfa:	91 11       	cpse	r25, r1
    1dfc:	1b c0       	rjmp	.+54     	; 0x1e34 <__vector_30+0x5e>
	{
		switch(bejovo)
    1dfe:	82 32       	cpi	r24, 0x22	; 34
    1e00:	69 f0       	breq	.+26     	; 0x1e1c <__vector_30+0x46>
    1e02:	18 f4       	brcc	.+6      	; 0x1e0a <__vector_30+0x34>
    1e04:	81 31       	cpi	r24, 0x11	; 17
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <__vector_30+0x3e>
    1e08:	15 c0       	rjmp	.+42     	; 0x1e34 <__vector_30+0x5e>
    1e0a:	83 33       	cpi	r24, 0x33	; 51
    1e0c:	59 f0       	breq	.+22     	; 0x1e24 <__vector_30+0x4e>
    1e0e:	85 35       	cpi	r24, 0x55	; 85
    1e10:	69 f0       	breq	.+26     	; 0x1e2c <__vector_30+0x56>
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <__vector_30+0x5e>
		{
			case 0x11: seged=1; break;
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <seged>
    1e1a:	17 c0       	rjmp	.+46     	; 0x1e4a <__vector_30+0x74>
			case 0x22: seged=2; break;
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <seged>
    1e22:	25 c0       	rjmp	.+74     	; 0x1e6e <__vector_30+0x98>
			case 0x33: seged=3; break;
    1e24:	93 e0       	ldi	r25, 0x03	; 3
    1e26:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <seged>
    1e2a:	33 c0       	rjmp	.+102    	; 0x1e92 <__vector_30+0xbc>
			case 0x55: seged=4; break;
    1e2c:	94 e0       	ldi	r25, 0x04	; 4
    1e2e:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <seged>
    1e32:	41 c0       	rjmp	.+130    	; 0x1eb6 <__vector_30+0xe0>
		}
	}
	
	switch(seged)
    1e34:	92 30       	cpi	r25, 0x02	; 2
    1e36:	d9 f0       	breq	.+54     	; 0x1e6e <__vector_30+0x98>
    1e38:	18 f4       	brcc	.+6      	; 0x1e40 <__vector_30+0x6a>
    1e3a:	91 30       	cpi	r25, 0x01	; 1
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <__vector_30+0x74>
    1e3e:	4c c0       	rjmp	.+152    	; 0x1ed8 <__vector_30+0x102>
    1e40:	93 30       	cpi	r25, 0x03	; 3
    1e42:	39 f1       	breq	.+78     	; 0x1e92 <__vector_30+0xbc>
    1e44:	94 30       	cpi	r25, 0x04	; 4
    1e46:	b9 f1       	breq	.+110    	; 0x1eb6 <__vector_30+0xe0>
    1e48:	47 c0       	rjmp	.+142    	; 0x1ed8 <__vector_30+0x102>
	{
		case 1:	data_fogad[counter]=bejovo; 
    1e4a:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <counter>
    1e4e:	e9 2f       	mov	r30, r25
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	ec 5f       	subi	r30, 0xFC	; 252
    1e54:	fc 4f       	sbci	r31, 0xFC	; 252
    1e56:	80 83       	st	Z, r24
				counter++;
    1e58:	9f 5f       	subi	r25, 0xFF	; 255
				if (counter==8)
    1e5a:	98 30       	cpi	r25, 0x08	; 8
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <__vector_30+0x8e>
	}
	
	switch(seged)
	{
		case 1:	data_fogad[counter]=bejovo; 
				counter++;
    1e5e:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <counter>
    1e62:	3a c0       	rjmp	.+116    	; 0x1ed8 <__vector_30+0x102>
				if (counter==8)
				{
					counter=0;
    1e64:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <counter>
					seged=0;
    1e68:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <seged>
    1e6c:	35 c0       	rjmp	.+106    	; 0x1ed8 <__vector_30+0x102>
				} break;
		case 2: data_fogad[counter]=bejovo;
    1e6e:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <counter>
    1e72:	e9 2f       	mov	r30, r25
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	ec 5f       	subi	r30, 0xFC	; 252
    1e78:	fc 4f       	sbci	r31, 0xFC	; 252
    1e7a:	80 83       	st	Z, r24
				counter++;
    1e7c:	9f 5f       	subi	r25, 0xFF	; 255
				if (counter==9)
    1e7e:	99 30       	cpi	r25, 0x09	; 9
    1e80:	19 f0       	breq	.+6      	; 0x1e88 <__vector_30+0xb2>
				{
					counter=0;
					seged=0;
				} break;
		case 2: data_fogad[counter]=bejovo;
				counter++;
    1e82:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <counter>
    1e86:	28 c0       	rjmp	.+80     	; 0x1ed8 <__vector_30+0x102>
				if (counter==9)
				{
					counter=0;
    1e88:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <counter>
					seged=0;
    1e8c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <seged>
    1e90:	23 c0       	rjmp	.+70     	; 0x1ed8 <__vector_30+0x102>
				} break;
		case 3: data_fogad[counter]=bejovo;
    1e92:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <counter>
    1e96:	e9 2f       	mov	r30, r25
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	ec 5f       	subi	r30, 0xFC	; 252
    1e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e9e:	80 83       	st	Z, r24
				counter++;
    1ea0:	9f 5f       	subi	r25, 0xFF	; 255
				if (counter==3)
    1ea2:	93 30       	cpi	r25, 0x03	; 3
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <__vector_30+0xd6>
				{
					counter=0;
					seged=0;
				} break;
		case 3: data_fogad[counter]=bejovo;
				counter++;
    1ea6:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <counter>
    1eaa:	16 c0       	rjmp	.+44     	; 0x1ed8 <__vector_30+0x102>
				if (counter==3)
				{
					counter=0;
    1eac:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <counter>
					seged=0;
    1eb0:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <seged>
    1eb4:	11 c0       	rjmp	.+34     	; 0x1ed8 <__vector_30+0x102>
				} break;
		case 4: data_fogad[counter]=bejovo;
    1eb6:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <counter>
    1eba:	e9 2f       	mov	r30, r25
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	ec 5f       	subi	r30, 0xFC	; 252
    1ec0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ec2:	80 83       	st	Z, r24
				counter++;
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
				if (counter==8)
    1ec6:	98 30       	cpi	r25, 0x08	; 8
    1ec8:	19 f0       	breq	.+6      	; 0x1ed0 <__vector_30+0xfa>
				{
					counter=0;
					seged=0;
				} break;
		case 4: data_fogad[counter]=bejovo;
				counter++;
    1eca:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <counter>
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <__vector_30+0x102>
				if (counter==8)
				{
					counter=0;
    1ed0:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <counter>
					seged=0;
    1ed4:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <seged>
				} break;
	}

	TIMSK|=0b00000010;
    1ed8:	87 b7       	in	r24, 0x37	; 55
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	87 bf       	out	0x37, r24	; 55
}
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	9f 91       	pop	r25
    1ee4:	8f 91       	pop	r24
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	0f 90       	pop	r0
    1eec:	1f 90       	pop	r1
    1eee:	18 95       	reti

00001ef0 <RS_drivebus>:

void RS_drivebus() 
{
	PORTC |= (1<<7);
    1ef0:	af 9a       	sbi	0x15, 7	; 21
	PORTE |= (1<<2);
    1ef2:	1a 9a       	sbi	0x03, 2	; 3
    1ef4:	08 95       	ret

00001ef6 <RS_releasebus>:
}

void RS_releasebus() 
{
	PORTC &= ~(1<<7);
    1ef6:	af 98       	cbi	0x15, 7	; 21
	PORTE &= ~(1<<2);
    1ef8:	1a 98       	cbi	0x03, 2	; 3
    1efa:	08 95       	ret

00001efc <RS_adatkuldes>:
}

void RS_adatkuldes(char *adatok)
{
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	ec 01       	movw	r28, r24
	UCSR1B&=~(1<<RXCIE1);
    1f02:	ea e9       	ldi	r30, 0x9A	; 154
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 77       	andi	r24, 0x7F	; 127
    1f0a:	80 83       	st	Z, r24
	
	RS_drivebus();
    1f0c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <RS_drivebus>
	while(!(UCSR1A&(1<<UDRE1))) {}
    1f10:	eb e9       	ldi	r30, 0x9B	; 155
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	85 ff       	sbrs	r24, 5
    1f18:	fd cf       	rjmp	.-6      	; 0x1f14 <RS_adatkuldes+0x18>
	UDR1 = 0x44;
    1f1a:	84 e4       	ldi	r24, 0x44	; 68
    1f1c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
	
	for(char i = 0; i < 2; i++) 
	{
		while(!(UCSR1A&(1<<UDRE1))) {}
    1f20:	eb e9       	ldi	r30, 0x9B	; 155
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	85 ff       	sbrs	r24, 5
    1f28:	fd cf       	rjmp	.-6      	; 0x1f24 <RS_adatkuldes+0x28>
		UDR1 = adatok[i];
    1f2a:	88 81       	ld	r24, Y
    1f2c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
	while(!(UCSR1A&(1<<UDRE1))) {}
	UDR1 = 0x44;
	
	for(char i = 0; i < 2; i++) 
	{
		while(!(UCSR1A&(1<<UDRE1))) {}
    1f30:	eb e9       	ldi	r30, 0x9B	; 155
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	85 ff       	sbrs	r24, 5
    1f38:	fd cf       	rjmp	.-6      	; 0x1f34 <RS_adatkuldes+0x38>
		UDR1 = adatok[i];
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
	}
	
	while(!(UCSR1A&(1<<UDRE1))) {}
    1f40:	eb e9       	ldi	r30, 0x9B	; 155
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	85 ff       	sbrs	r24, 5
    1f48:	fd cf       	rjmp	.-6      	; 0x1f44 <RS_adatkuldes+0x48>
	UDR1 = 0xBB;
    1f4a:	8b eb       	ldi	r24, 0xBB	; 187
    1f4c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
	while(!(UCSR1A&(1<<UDRE1))) {}
    1f50:	eb e9       	ldi	r30, 0x9B	; 155
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	85 ff       	sbrs	r24, 5
    1f58:	fd cf       	rjmp	.-6      	; 0x1f54 <RS_adatkuldes+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f5a:	8f e9       	ldi	r24, 0x9F	; 159
    1f5c:	9f e0       	ldi	r25, 0x0F	; 15
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <RS_adatkuldes+0x62>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <RS_adatkuldes+0x68>
    1f64:	00 00       	nop
		
	_delay_ms(2);
	RS_releasebus();
    1f66:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <RS_releasebus>
	
	UCSR1B|=(1<<RXCIE1);
    1f6a:	ea e9       	ldi	r30, 0x9A	; 154
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 68       	ori	r24, 0x80	; 128
    1f72:	80 83       	st	Z, r24
}
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <USART_Init>:
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	///* Set frame format: 8data, 2stop bit */
	//UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    1f7a:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
	UBRR1L = (unsigned char)ubrr;
    1f7e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)| (1 << RXCIE1);
    1f82:	88 e9       	ldi	r24, 0x98	; 152
    1f84:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
    1f88:	8e e0       	ldi	r24, 0x0E	; 14
    1f8a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__DATA_REGION_ORIGIN__+0x3d>
    1f8e:	08 95       	ret

00001f90 <__divmodsi4>:
    1f90:	05 2e       	mov	r0, r21
    1f92:	97 fb       	bst	r25, 7
    1f94:	1e f4       	brtc	.+6      	; 0x1f9c <__divmodsi4+0xc>
    1f96:	00 94       	com	r0
    1f98:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__negsi2>
    1f9c:	57 fd       	sbrc	r21, 7
    1f9e:	07 d0       	rcall	.+14     	; 0x1fae <__divmodsi4_neg2>
    1fa0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__udivmodsi4>
    1fa4:	07 fc       	sbrc	r0, 7
    1fa6:	03 d0       	rcall	.+6      	; 0x1fae <__divmodsi4_neg2>
    1fa8:	4e f4       	brtc	.+18     	; 0x1fbc <__divmodsi4_exit>
    1faa:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__negsi2>

00001fae <__divmodsi4_neg2>:
    1fae:	50 95       	com	r21
    1fb0:	40 95       	com	r20
    1fb2:	30 95       	com	r19
    1fb4:	21 95       	neg	r18
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fba:	5f 4f       	sbci	r21, 0xFF	; 255

00001fbc <__divmodsi4_exit>:
    1fbc:	08 95       	ret

00001fbe <__negsi2>:
    1fbe:	90 95       	com	r25
    1fc0:	80 95       	com	r24
    1fc2:	70 95       	com	r23
    1fc4:	61 95       	neg	r22
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	08 95       	ret

00001fce <__tablejump2__>:
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	05 90       	lpm	r0, Z+
    1fd4:	f4 91       	lpm	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	09 94       	ijmp

00001fda <__udivmodsi4>:
    1fda:	a1 e2       	ldi	r26, 0x21	; 33
    1fdc:	1a 2e       	mov	r1, r26
    1fde:	aa 1b       	sub	r26, r26
    1fe0:	bb 1b       	sub	r27, r27
    1fe2:	fd 01       	movw	r30, r26
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <__udivmodsi4_ep>

00001fe6 <__udivmodsi4_loop>:
    1fe6:	aa 1f       	adc	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	ee 1f       	adc	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	a2 17       	cp	r26, r18
    1ff0:	b3 07       	cpc	r27, r19
    1ff2:	e4 07       	cpc	r30, r20
    1ff4:	f5 07       	cpc	r31, r21
    1ff6:	20 f0       	brcs	.+8      	; 0x2000 <__udivmodsi4_ep>
    1ff8:	a2 1b       	sub	r26, r18
    1ffa:	b3 0b       	sbc	r27, r19
    1ffc:	e4 0b       	sbc	r30, r20
    1ffe:	f5 0b       	sbc	r31, r21

00002000 <__udivmodsi4_ep>:
    2000:	66 1f       	adc	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	88 1f       	adc	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	1a 94       	dec	r1
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <__udivmodsi4_loop>
    200c:	60 95       	com	r22
    200e:	70 95       	com	r23
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	bd 01       	movw	r22, r26
    201a:	cf 01       	movw	r24, r30
    201c:	08 95       	ret

0000201e <_exit>:
    201e:	f8 94       	cli

00002020 <__stop_program>:
    2020:	ff cf       	rjmp	.-2      	; 0x2020 <__stop_program>
